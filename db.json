{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"source/img/scrollup.png","path":"img/scrollup.png","modified":0},{"_id":"source/img/20150911175850.png","path":"img/20150911175850.png","modified":0},{"_id":"source/img/20150911175830.png","path":"img/20150911175830.png","modified":0},{"_id":"themes/yilia/source/js/totop.js","path":"js/totop.js","modified":0},{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":0},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":0},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":0},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":0},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":0},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":0},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":0},{"_id":"themes/yilia/source/img/touxiang.jpg","path":"img/touxiang.jpg","modified":0},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0},{"_id":"themes/yilia/source/img/scrollup.png","path":"img/scrollup.png","modified":0},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":0},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":0},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":0},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":0},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":0},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":0},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":0},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":0},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":0},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":0},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":0},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":0},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":0},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":0},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0},{"_id":"source/img/20151103171005.png","path":"img/20151103171005.png","modified":0},{"_id":"source/img/20151103170057.png","path":"img/20151103170057.png","modified":0},{"_id":"source/img/20151103161333.png","path":"img/20151103161333.png","modified":0},{"_id":"source/img/20151103161226.png","path":"img/20151103161226.png","modified":0},{"_id":"source/img/20151103161035.png","path":"img/20151103161035.png","modified":0},{"_id":"source/img/20151103160455.png","path":"img/20151103160455.png","modified":0},{"_id":"source/img/20151103110010.png","path":"img/20151103110010.png","modified":0},{"_id":"source/img/20151102114045.png","path":"img/20151102114045.png","modified":0},{"_id":"source/img/20151102113923.png","path":"img/20151102113923.png","modified":0},{"_id":"source/img/20151008111535.png","path":"img/20151008111535.png","modified":0},{"_id":"source/img/20150929181355.png","path":"img/20150929181355.png","modified":0},{"_id":"source/img/20150925162728.png","path":"img/20150925162728.png","modified":0},{"_id":"source/img/20150924104521.png","path":"img/20150924104521.png","modified":0},{"_id":"source/img/20150924094142.png","path":"img/20150924094142.png","modified":0},{"_id":"source/img/20150918144733.png","path":"img/20150918144733.png","modified":0},{"_id":"source/img/20150918142922.png","path":"img/20150918142922.png","modified":0},{"_id":"source/img/20150918133023.png","path":"img/20150918133023.png","modified":0},{"_id":"source/img/20150916211326.png","path":"img/20150916211326.png","modified":0},{"_id":"source/resources/ffmpeg安装文件和教程.tar.gz","path":"resources/ffmpeg安装文件和教程.tar.gz","modified":0},{"_id":"source/img/20151223115020.png","path":"img/20151223115020.png","modified":0},{"_id":"source/img/20151215184955.png","path":"img/20151215184955.png","modified":0},{"_id":"source/img/20151215184200.png","path":"img/20151215184200.png","modified":0},{"_id":"source/img/20151215183745.png","path":"img/20151215183745.png","modified":0},{"_id":"source/img/20151215181539.png","path":"img/20151215181539.png","modified":0},{"_id":"source/img/20151215181123.png","path":"img/20151215181123.png","modified":0},{"_id":"source/resources/安卓反编译工具.zip","path":"resources/安卓反编译工具.zip","modified":0},{"_id":"source/img/20160311140235.png","path":"img/20160311140235.png","modified":0},{"_id":"source/img/20160311140015.png","path":"img/20160311140015.png","modified":0},{"_id":"source/img/20160311114405.png","path":"img/20160311114405.png","modified":0},{"_id":"source/img/20160311113510.png","path":"img/20160311113510.png","modified":0},{"_id":"source/img/20160311113128.png","path":"img/20160311113128.png","modified":0},{"_id":"source/img/20160311112943.png","path":"img/20160311112943.png","modified":0},{"_id":"source/img/20160311112427.png","path":"img/20160311112427.png","modified":0},{"_id":"source/img/20160311111224.png","path":"img/20160311111224.png","modified":0},{"_id":"source/img/201606033354.png","path":"img/201606033354.png","modified":0},{"_id":"source/img/201606033326.png","path":"img/201606033326.png","modified":0},{"_id":"source/img/201606033310.png","path":"img/201606033310.png","modified":0},{"_id":"source/img/201606033212.png","path":"img/201606033212.png","modified":0},{"_id":"source/img/20160603165920.png","path":"img/20160603165920.png","modified":0},{"_id":"source/img/20160810202223.png","path":"img/20160810202223.png","modified":0}],"Cache":[{"_id":"source/_posts/Hexo，添加返回顶部按钮.md","shasum":"a73455a11000c0f2be68869ca1aad4d52f2e1489","modified":1441090598000},{"_id":"source/_posts/LeetCode刷题之第一题——TwoSum.md","shasum":"ae3ac3e90d5a0966a35b89eca0c0661f0ec87e49","modified":1441095778000},{"_id":"source/_posts/hello-world.md","shasum":"2b5f904c75961e8cebb7c470ec06c7fad6c8e586","modified":1441090889000},{"_id":"source/_posts/linux下vi操作文件FoundASwapFileByTheName.md","shasum":"fe514fd26167fe11883001c7b23d7679fa1867a1","modified":1442057530000},{"_id":"source/_posts/使用xib代替stroyboard启动工程.md","shasum":"afebc2368e907cf9362231a7a5a5b5022430aa53","modified":1442055761000},{"_id":"source/img/20150911175830.png","shasum":"c2b4c97520c712f7852c6806bd681ddfa6983a5a","modified":1441965650000},{"_id":"source/img/20150911175850.png","shasum":"c667d9ea1bbf03b23d3c80a1c0018908448481d5","modified":1442054693000},{"_id":"source/img/scrollup.png","shasum":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1441014676000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","shasum":"2b71e822db7e59a5b2b28ca55cb908ebe6f56a8e","modified":1441089891000},{"_id":"themes/yilia/README.md","shasum":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1440984965000},{"_id":"themes/yilia/_config.yml","shasum":"2d5f6d263afc8b784c1bdf64069c9d996f0ee301","modified":1446627878000},{"_id":"themes/yilia/layout/_partial/archive.ejs","shasum":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1440984965000},{"_id":"themes/yilia/layout/_partial/article.ejs","shasum":"ef8dd558f908f293c34123c0b7ff879d2fd0c09f","modified":1440984965000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","shasum":"8dfb6d68aa8a0661d26c32ce1ce1f45815364c3a","modified":1440984965000},{"_id":"themes/yilia/layout/_partial/footer.ejs","shasum":"2e239c09f67139efe972544fb0b139c65068da96","modified":1442211938000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1440984965000},{"_id":"themes/yilia/layout/_partial/head.ejs","shasum":"100f1c9035a171bf30775c7348c248414c9a10d4","modified":1446628460000},{"_id":"themes/yilia/layout/_partial/header.ejs","shasum":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1440984965000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","shasum":"70a9951e4e2d30aabba88e75c3fa54b9235ce6a6","modified":1440984965000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","shasum":"54fab4d3d64cb937d6baec7324ffabf9f202b883","modified":1440984965000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","shasum":"cd0af87ee781ac9c2b0e6a2a05b063d4bd497d9c","modified":1440984965000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","shasum":"d4f0e36f9a2167e91082dbd7d52425a06d2bebbf","modified":1440984965000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","shasum":"c0c988334e857a77ba455a056dfa21809e7e76a5","modified":1440984965000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","shasum":"d19dee2082528e1844bed3aa4e4bd59f15fd7a7a","modified":1440984965000},{"_id":"themes/yilia/layout/_partial/footer.ejs.bk","shasum":"0397442c60b1c5d21dbee690ce716f866379efa2","modified":1440989215000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","shasum":"50e877846f860b22a5e2e9df3488aa297978e3e0","modified":1441003159000},{"_id":"themes/yilia/layout/_partial/totop.ejs","shasum":"1e019eee609eed95a173bacf34ce17310072f9bc","modified":1470841320000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","shasum":"da39b4ba0c0ce4e1932fd45c5aee10e8aca41f28","modified":1440984965000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","shasum":"78612cfc091d7d861a70455a0dc8c3036e460879","modified":1440984965000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1440984965000},{"_id":"themes/yilia/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1440984965000},{"_id":"themes/yilia/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1440984965000},{"_id":"themes/yilia/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1440984965000},{"_id":"themes/yilia/layout/layout.ejs","shasum":"23d5538149458526ecb0c78920f0cc525ef8e374","modified":1442194654000},{"_id":"themes/yilia/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1440984965000},{"_id":"themes/yilia/source/css/_extend.styl","shasum":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1440984965000},{"_id":"themes/yilia/source/css/_partial/archive.styl","shasum":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1440984965000},{"_id":"themes/yilia/source/css/_partial/article.styl","shasum":"872fc4e63509fef885c939e5fd70e6ed439beced","modified":1440984965000},{"_id":"themes/yilia/source/css/_partial/footer.styl","shasum":"ea7d29f73b6fd783b7f4bc425c086dbc5e3544a9","modified":1442212406000},{"_id":"themes/yilia/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1440984965000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","shasum":"8cadf8437ce6f372802d3d28617a1ab97e7c818e","modified":1440984965000},{"_id":"themes/yilia/source/css/_partial/instagram.styl","shasum":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1440984965000},{"_id":"themes/yilia/source/css/_partial/main.styl","shasum":"a16aa9cecf18af34592c469b393660b56e18f695","modified":1442210059000},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","shasum":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1440984965000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","shasum":"93ea44d10e260962a09fa6e598690166d41fd073","modified":1442210184000},{"_id":"themes/yilia/source/css/_partial/page.styl","shasum":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1440984965000},{"_id":"themes/yilia/source/css/_partial/scroll.styl","shasum":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1440984965000},{"_id":"themes/yilia/source/css/_partial/share.styl","shasum":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1440984965000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","shasum":"af0115de5c6455f899a2e09225b50224982c039d","modified":1440984965000},{"_id":"themes/yilia/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1440984965000},{"_id":"themes/yilia/source/css/_util/grid.styl","shasum":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1440984965000},{"_id":"themes/yilia/source/css/_util/mixin.styl","shasum":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1440984965000},{"_id":"themes/yilia/source/css/_variables.styl","shasum":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1440984965000},{"_id":"themes/yilia/package.json","shasum":"00357ef6f24eb049074da81809e98f973f528cca","modified":1440984965000},{"_id":"themes/yilia/source/css/_partial/header.styl","shasum":"67e59feb18eee6026717cb440d86ab9551782628","modified":1440984965000},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","shasum":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1440984965000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","shasum":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1440984965000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","shasum":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1440984965000},{"_id":"themes/yilia/source/css/style.styl","shasum":"456e8cfe3b0b0371e81848ea9b0bc7ffd5360921","modified":1440984965000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","shasum":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1440984965000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","shasum":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1440984965000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1440984965000},{"_id":"themes/yilia/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1440984965000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1440984965000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1440984965000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1440984965000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1440984965000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1440984965000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1440984965000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1440984965000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","shasum":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1440984965000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","shasum":"a82597493d75ea989ca586e09173cff332efe41e","modified":1440984965000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1440984965000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1440984965000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1440984965000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1440984965000},{"_id":"themes/yilia/source/img/coderwall.png","shasum":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1440984965000},{"_id":"themes/yilia/source/img/github.png","shasum":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1440984965000},{"_id":"themes/yilia/source/img/delicious.png","shasum":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1440984965000},{"_id":"themes/yilia/source/img/douban.png","shasum":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1440984965000},{"_id":"themes/yilia/source/img/facebook.png","shasum":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1440984965000},{"_id":"themes/yilia/source/img/google.png","shasum":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1440984965000},{"_id":"themes/yilia/source/img/mail.png","shasum":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1440984965000},{"_id":"themes/yilia/source/img/img-err.png","shasum":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1440984965000},{"_id":"themes/yilia/source/img/img-loading.png","shasum":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1440984965000},{"_id":"themes/yilia/source/img/linkedin.png","shasum":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1440984965000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","shasum":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1440984965000},{"_id":"themes/yilia/source/img/scrollup.png","shasum":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1441089976000},{"_id":"themes/yilia/source/img/pinboard.png","shasum":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1440984965000},{"_id":"themes/yilia/source/img/pinterest.png","shasum":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1440984965000},{"_id":"themes/yilia/source/img/weibo.png","shasum":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1440984965000},{"_id":"themes/yilia/source/img/rss.png","shasum":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1440984965000},{"_id":"themes/yilia/source/img/stackoverflow.png","shasum":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1440984965000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","shasum":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1440984965000},{"_id":"themes/yilia/source/js/main.js","shasum":"934a99ff6c53013c61add02ad94eb9d93890b466","modified":1442197566000},{"_id":"themes/yilia/source/img/twitter.png","shasum":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1440984965000},{"_id":"themes/yilia/source/js/pc.js","shasum":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1440984965000},{"_id":"themes/yilia/source/js/totop.js","shasum":"a4f730f537b06bba01f302dd304351708eaed9de","modified":1441089778000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","shasum":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1440984965000},{"_id":"themes/yilia/source/img/touxiang.jpg","shasum":"9bacceeabd28137666ffa139715d9b0be7fe25ce","modified":1440987896000},{"_id":"themes/yilia/source/img/zhihu.png","shasum":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1440984965000},{"_id":"themes/yilia/source/js/instagram.js","shasum":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1440984965000},{"_id":"themes/yilia/source/js/mobile.js","shasum":"5ad912ae95d33e968c5c84a9ce889003df8a4ebc","modified":1442195374000},{"_id":"themes/yilia/source/css/_partial/main.styl.bak","shasum":"4268f759920106a576c6037264076b36018ff73b","modified":1442158623000},{"_id":"source/_posts/Android使用ant打包.md","shasum":"5aad22a67b600a3795143dcb0a2b5717122b5e3c","modified":1442560607000},{"_id":"source/_posts/How to see React Native support whilc style.md","shasum":"bb6480aa0c030017b73a2db28c7babb98b2bebd6","modified":1443169958000},{"_id":"source/_posts/React Native use NavigatorIOS.md","shasum":"2fdfd73fdf0e7960c00300077bb89f9be38eb6b4","modified":1443523008000},{"_id":"source/_posts/Use React Native Development App.md","shasum":"95548da096e9f761e0a814ce36d7375a34909977","modified":1443063455000},{"_id":"source/_posts/how to ues react-native-swiper.md","shasum":"115dd403a211e8c215c79172d35096aa31c1b66b","modified":1444274225000},{"_id":"source/_posts/iOS扫描银行卡号-swift版.md","shasum":"944c39921fb69d943f5cd6e954606426396be953","modified":1446458649000},{"_id":"source/_posts/markdown语法.md","shasum":"ab03c7da6e303515163b8d15c9d01c5162cd68f1","modified":1443524438000},{"_id":"source/_posts/简化Storyboard.md","shasum":"f97688b189657b731238f2277e8512128e517136","modified":1446542529000},{"_id":"source/img/20150916211326.png","shasum":"1bbdd107747c166df0749a03e6c55edbe913a2df","modified":1407405994000},{"_id":"source/img/20150924094142.png","shasum":"1e8627c08ad27c596e528e787fe04ffecb80481c","modified":1443059811000},{"_id":"source/img/20150929181355.png","shasum":"6ecc279874b0fba3d0bc88f0aa21cd45fd049f6c","modified":1443522277000},{"_id":"source/img/20151008111535.png","shasum":"3753b2adc4bfdd9a3e82c9498413fca7d88716be","modified":1444274221000},{"_id":"source/img/20151103110010.png","shasum":"69961335a705c1fad65f583171356076e19db2bd","modified":1446541850000},{"_id":"source/img/20151103160455.png","shasum":"3ef83f2e5f43c46fd699fc7ad2fdd51f50b77a49","modified":1446541851000},{"_id":"source/img/20151103161035.png","shasum":"7de5fa2ebc79d2caa383aabfc9db8ce112d5d718","modified":1446541851000},{"_id":"source/img/20151103161226.png","shasum":"4bf380d7452ba3375f745f31dfbead73a9c94391","modified":1446541852000},{"_id":"source/img/20151103161333.png","shasum":"dc3bd9e86528094558b958de15f6646c2a55defc","modified":1446541854000},{"_id":"source/img/20151103170057.png","shasum":"63bbd92063a43067850258849992346939ee4aaf","modified":1446541854000},{"_id":"source/img/20151103171005.png","shasum":"f0671d3b72e829eaa4d9c671ec9878dd2520c131","modified":1446541856000},{"_id":"source/img/20150918142922.png","shasum":"85355627c2106ad69f1a8869f8977c8b14dcbecd","modified":1442559218000},{"_id":"source/img/20150924104521.png","shasum":"644ed80a57c67370c0755b64095eb939c47eec87","modified":1442392904000},{"_id":"source/img/20151102113923.png","shasum":"e515b5a6474849a48b01cfb0a6735894440d48da","modified":1446443678000},{"_id":"source/img/20151102114045.png","shasum":"02a68ba489b441334604d693cd45f23d0bb098fa","modified":1446443679000},{"_id":"source/img/20150918133023.png","shasum":"3bfb0fa695eb706f5cbde0749ffe6437994f0b78","modified":1442559214000},{"_id":"source/img/20150918144733.png","shasum":"cfd724aa6b8595bd707cb86a6f186ac5448bc366","modified":1442559221000},{"_id":"source/img/20150925162728.png","shasum":"1213f1be4451e74f08b389917f229c3593b27303","modified":1443169946000},{"_id":"themes/yilia/source/css/_partial/mobile.styl.bak","shasum":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1442210208000},{"_id":"themes/yilia/layout/_partial/baidu_tongji.ejs","shasum":"d919a58261b36ec4d5866c8714f943fd2350f892","modified":1446627970000},{"_id":"themes/yilia/layout/_partial/baidu_tijiao.ejs","shasum":"83fa713d2c061158e6ce5446e15d058b9aff460d","modified":1446628288000},{"_id":"source/_posts/7.1中使用Http请求.md","shasum":"86b93cad6f1fd5f9d1c5d2d3c225bf42af3afacd","modified":1450776755000},{"_id":"source/_posts/Android Studio 实现百度地图地位.md","shasum":"2b6b6a2d890298d0d4afde0d6456bbec5477fe81","modified":1450249311000},{"_id":"source/_posts/Android Studio 集成百度地图开发.md","shasum":"861ba19c894b9e7dc9bd3af59c3911f355cd90d1","modified":1450230601000},{"_id":"source/_posts/linux下使用ffmpeg将amr转成mp3.md","shasum":"433d47f83bcc972e1330ab5bb7131422fc38128c","modified":1456385444000},{"_id":"source/_posts/用命令行在iOS应用中集成Alamofire.md","shasum":"aa200e869f45defe4b4ac8bd0bbc32f9505f148a","modified":1450846562000},{"_id":"source/img/20151215181123.png","shasum":"baab499f6a48b9ed4d87de0febbc583b4e1ad762","modified":1450846045000},{"_id":"source/img/20151215184200.png","shasum":"e3864595a1d73f1a5045aa655008bbbc91846e95","modified":1450846219000},{"_id":"source/img/20151215184955.png","shasum":"6c86303b27d74515ae3e5c5c10917f1eb43ac134","modified":1450846274000},{"_id":"source/img/20151215183745.png","shasum":"2963fb0071a0da317246c789fe367a2eab18af73","modified":1450846153000},{"_id":"source/img/20151223115020.png","shasum":"afb0e94e6c29833cb68836ac43332a59e47d6d1b","modified":1450846389000},{"_id":"source/img/20151215181539.png","shasum":"e7922611d146f952052611656fea9a3ba5efac53","modified":1450846108000},{"_id":"source/resources/ffmpeg安装文件和教程.tar.gz","shasum":"0e20f2a784ca271b7743f99c75e73964b3b59f68","modified":1456386592000},{"_id":"source/_posts/iOS集成百度在线语言合成.md","shasum":"9fdb2d5e9b641eb845f3f0445cf055d12b6c62ac","modified":1457676703000},{"_id":"source/img/20160311112427.png","shasum":"879f4f340a9fda99f0a32ad3b16c8b23cddd75a7","modified":1457676305000},{"_id":"source/_posts/Android反编译.md","shasum":"0ddab69441fa738902eebc1d9a5d14b41ad4ea5f","modified":1457943159000},{"_id":"source/img/20160311140015.png","shasum":"73a3fad4102c39dd75cd9177ecf772b2a782a516","modified":1457676461000},{"_id":"source/img/20160311112943.png","shasum":"a72155bd0980760445ce985255a8eda02e8cb034","modified":1457676313000},{"_id":"source/img/20160311111224.png","shasum":"cf3ed053f068c4cc14aaa197be1ef7e9617b1b5e","modified":1457676297000},{"_id":"source/img/20160311113510.png","shasum":"3dc7ad59082cef8c8e28db7daebf975acca51cf2","modified":1457676403000},{"_id":"source/img/20160311113128.png","shasum":"07f5ed1d6b20c9a98494ff88939b0901a6085dfd","modified":1457676359000},{"_id":"source/img/20160311114405.png","shasum":"bb882ec8b1aeb37cc3898d829a650d55895b2bde","modified":1457676455000},{"_id":"source/img/20160311140235.png","shasum":"cd4b4b8420a8bf78faf59fa8628b8b210a5188e9","modified":1457676527000},{"_id":"source/resources/安卓反编译工具.zip","shasum":"f4802cadac6366d56dd941a4237a42df1871353c","modified":1457679674000},{"_id":"source/_posts/CentOS更改yum源与更新系统.md","shasum":"d46a04a925be1a443dcbbff767237f3adaebea37","modified":1465299556000},{"_id":"source/_posts/Idea设置eclipse快捷键.md","shasum":"9e9c63133d139c8f04c8cff52e397f5d9caeaad9","modified":1465887529000},{"_id":"source/img/20160603165920.png","shasum":"45cdc7d4dda65ff7794454e8dd3a52d7a4589723","modified":1464944630000},{"_id":"source/_posts/Idea快捷键.md","shasum":"0ecba5f35bc118af8ca0aa415c6d54495ba6531f","modified":1464603570000},{"_id":"source/_posts/mac设置全局命令.md","shasum":"87143a56afeaa03b8ed2b81700512a8afb2c6931","modified":1465716155000},{"_id":"source/img/201606033212.png","shasum":"bda62dd9e840c16013b65d9a9c485e57b21260a2","modified":1464944631000},{"_id":"source/img/201606033310.png","shasum":"15d20e7028ecfcd51dbb181f915adde711265f6e","modified":1464944632000},{"_id":"source/img/201606033354.png","shasum":"6878e416e034b4b1ac9f7e1ef90fc91305df2334","modified":1464944633000},{"_id":"source/img/201606033326.png","shasum":"d52250929f67facab457fb550d16c8da5716c5ca","modified":1464944633000},{"_id":"source/_posts/ spring-boot使用.md","shasum":"1f5628740137fba2011db40fb06c37c4102c5671","modified":1470839674000},{"_id":"source/_posts/spring-boot加入Servlet.md","shasum":"49a5f4a4ab0672f9cd9a95efee8fd4c6fd9079e2","modified":1470839674000},{"_id":"source/img/20160810202223.png","shasum":"8d3a550f559c3154f077ddfa7dcaaeae5436cd49","modified":1470839674000}],"Category":[{"name":"hexo学习","_id":"cieinu1mc00014ovhn2j045i8"},{"name":"学习","_id":"cieinu1n400084ovht2314az2"}],"Data":[],"Page":[],"Post":[{"title":"Hexo，添加返回顶部按钮","date":"2015-08-31T08:03:15.000Z","_content":"  其实，在hexo中实现这个功能不复杂，结合网上的教程，对相应的模块进行修改就可以了。现给出自己修改的过程...\n<!--more-->\n## 添加html代码。\n打开文件夹/themes/Yilia/layout/_partial在此文件夹下，新建文件totop.ejs，并向其中加入如下代码：\n``` bash\n<div id=\"totop\" style=\"position:fixed;bottom:150px;right:50px;cursor: pointer;z-index: 99999;\">\n<a title=\"返回顶部\"><img src=\"/img/scrollup.png\"/></a>\n</div>\n```\n## 添加js代码。\n打开文件夹/themes/Yilia/source/js，新建文件totop.js，将如下代码复制其中：\n``` bash\n(function($) {\n\t// When to show the scroll link\n\t// higher number = scroll link appears further down the page\n\tvar upperLimit = 1000;\n\n\t// Our scroll link element\n\tvar scrollElem = $('#totop');\n\n\t// Scroll to top speed\n\tvar scrollSpeed = 500;\n\n\t// Show and hide the scroll to top link based on scroll position\n\tscrollElem.hide();\n\t$(window).scroll(function () {\n\t\tvar scrollTop = $(document).scrollTop();\n\t\tif ( scrollTop > upperLimit ) {\n\t\t\t$(scrollElem).stop().fadeTo(300, 1); // fade back in\n\t\t}else{\n\t\t\t$(scrollElem).stop().fadeTo(300, 0); // fade out\n\t\t}\n\t});\n\n\t// Scroll to top animation on click\n\t$(scrollElem).click(function(){\n\t\t$('html, body').animate({scrollTop:0}, scrollSpeed); return false;\n\t});\n)(jQuery);\n```\n可以对upperLimit和scrollSpeed参数进行修改，控制显示位置和回滚速度。\n## 添加文件引用。\n打开文件/themes/Yilia/layout/_partial/after_footer.ejs，在文件的末尾添加以下两行代码：\n``` bash\n<%- partial('totop') %>\n<script src=\"<%- config.root %>js/totop.js\"></script>\n```\n## 添加按钮图片\n将下面的图片复制到/themes/Yilia/source/img目录下，文件名为scrollup.png，页面足够长时，就看到按钮出现了。\n![](http://120.24.60.216:4000/img/scrollup.png)\n\n","source":"_posts/Hexo，添加返回顶部按钮.md","raw":"title: Hexo，添加返回顶部按钮\ndate: 2015-08-31 16:03:15\ncategories:\n- hexo学习 \ntags:\n- Hexo \n- node.js\n---\n  其实，在hexo中实现这个功能不复杂，结合网上的教程，对相应的模块进行修改就可以了。现给出自己修改的过程...\n<!--more-->\n## 添加html代码。\n打开文件夹/themes/Yilia/layout/_partial在此文件夹下，新建文件totop.ejs，并向其中加入如下代码：\n``` bash\n<div id=\"totop\" style=\"position:fixed;bottom:150px;right:50px;cursor: pointer;z-index: 99999;\">\n<a title=\"返回顶部\"><img src=\"/img/scrollup.png\"/></a>\n</div>\n```\n## 添加js代码。\n打开文件夹/themes/Yilia/source/js，新建文件totop.js，将如下代码复制其中：\n``` bash\n(function($) {\n\t// When to show the scroll link\n\t// higher number = scroll link appears further down the page\n\tvar upperLimit = 1000;\n\n\t// Our scroll link element\n\tvar scrollElem = $('#totop');\n\n\t// Scroll to top speed\n\tvar scrollSpeed = 500;\n\n\t// Show and hide the scroll to top link based on scroll position\n\tscrollElem.hide();\n\t$(window).scroll(function () {\n\t\tvar scrollTop = $(document).scrollTop();\n\t\tif ( scrollTop > upperLimit ) {\n\t\t\t$(scrollElem).stop().fadeTo(300, 1); // fade back in\n\t\t}else{\n\t\t\t$(scrollElem).stop().fadeTo(300, 0); // fade out\n\t\t}\n\t});\n\n\t// Scroll to top animation on click\n\t$(scrollElem).click(function(){\n\t\t$('html, body').animate({scrollTop:0}, scrollSpeed); return false;\n\t});\n)(jQuery);\n```\n可以对upperLimit和scrollSpeed参数进行修改，控制显示位置和回滚速度。\n## 添加文件引用。\n打开文件/themes/Yilia/layout/_partial/after_footer.ejs，在文件的末尾添加以下两行代码：\n``` bash\n<%- partial('totop') %>\n<script src=\"<%- config.root %>js/totop.js\"></script>\n```\n## 添加按钮图片\n将下面的图片复制到/themes/Yilia/source/img目录下，文件名为scrollup.png，页面足够长时，就看到按钮出现了。\n![](http://120.24.60.216:4000/img/scrollup.png)\n\n","slug":"Hexo，添加返回顶部按钮","published":1,"updated":"2015-09-01T06:56:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cieinu1m600004ovh1dz2pmsb"},{"title":"使用xib代替stroyboard启动程序","date":"2015-09-11T09:49:05.000Z","_content":"## 新建一个swift工程\n应该都懂怎么建一个swift工程，这里不详细啰嗦\n\n<!--more-->\n\n## 删除文件：\n> 删除ViewController.swift文件\n> 删除Main.storyboard文件\n\n## 设置工程的Main interface 为空\n\n如图\n![](http://120.24.60.216:4000/img/20150911175830.png)\n\n## 新建一个命名为mian的UIViewController，勾选Also create XIB file\n\n![](http://120.24.60.216:4000/img/20150911175850.png)\n\n## 修改AppDelegate.swift文件的application方法\n\n```bash\napplication(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {\n        // Override point for customization after application launch.\n        var viewController = Main(nibName: \"Main\", bundle: nil)\n        var navigationController = UINavigationController(rootViewController: viewController)\n        \n        self.window = UIWindow(frame: UIScreen.mainScreen().bounds)\n        self.window?.rootViewController = navigationController\n        self.window?.makeKeyAndVisible()\n        \n        return true\n}\n```\n\n这样就可以用我们自定义的xib代替storyboard启动工程了\n","source":"_posts/使用xib代替stroyboard启动工程.md","raw":"title: 使用xib代替stroyboard启动程序\ndate: 2015-09-11 17:49:05\ncategories:\n- 学习\ntags:\n- swift\n- iOS\n---\n## 新建一个swift工程\n应该都懂怎么建一个swift工程，这里不详细啰嗦\n\n<!--more-->\n\n## 删除文件：\n> 删除ViewController.swift文件\n> 删除Main.storyboard文件\n\n## 设置工程的Main interface 为空\n\n如图\n![](http://120.24.60.216:4000/img/20150911175830.png)\n\n## 新建一个命名为mian的UIViewController，勾选Also create XIB file\n\n![](http://120.24.60.216:4000/img/20150911175850.png)\n\n## 修改AppDelegate.swift文件的application方法\n\n```bash\napplication(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {\n        // Override point for customization after application launch.\n        var viewController = Main(nibName: \"Main\", bundle: nil)\n        var navigationController = UINavigationController(rootViewController: viewController)\n        \n        self.window = UIWindow(frame: UIScreen.mainScreen().bounds)\n        self.window?.rootViewController = navigationController\n        self.window?.makeKeyAndVisible()\n        \n        return true\n}\n```\n\n这样就可以用我们自定义的xib代替storyboard启动工程了\n","slug":"使用xib代替stroyboard启动工程","published":1,"updated":"2015-09-12T11:02:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cieinu1n300074ovhnrmaq7vy"},{"title":"linux下vi操作文件Found a swap file by the name","date":"2015-09-12T11:25:05.000Z","_content":"## 在linux下用vi打开Test.java文件时\n~~~bash\nvi Test.java\n~~~\n\n会出现Found a swap file by the name \".Test.java.swp\" \n\n原因是我之前有一次使用vi 操作Test.java文件时出现了异常中断，所以在当前目录下产生了一个.Test.java.swp文件\n但是我使用ls命令查看该目录下，却发现没有这个文件，后来使用ls -a命令查看才知道Test.java.swp是一个隐藏文件。\n\n现在只要把.Test.java.swp文件删除就可以可以了，这样就不会再出现上面的提示\n\n~~~bash\nrm .Test.java.swp\n~~~","source":"_posts/linux下vi操作文件FoundASwapFileByTheName.md","raw":"title: linux下vi操作文件Found a swap file by the name\ndate: 2015-09-12 19:25:05\ncategories:\n- 学习\ntags:\n- linux\n---\n## 在linux下用vi打开Test.java文件时\n~~~bash\nvi Test.java\n~~~\n\n会出现Found a swap file by the name \".Test.java.swp\" \n\n原因是我之前有一次使用vi 操作Test.java文件时出现了异常中断，所以在当前目录下产生了一个.Test.java.swp文件\n但是我使用ls命令查看该目录下，却发现没有这个文件，后来使用ls -a命令查看才知道Test.java.swp是一个隐藏文件。\n\n现在只要把.Test.java.swp文件删除就可以可以了，这样就不会再出现上面的提示\n\n~~~bash\nrm .Test.java.swp\n~~~","slug":"linux下vi操作文件FoundASwapFileByTheName","published":1,"updated":"2015-09-12T11:32:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cieinu1n8000e4ovh5j54nb4d"},{"title":"Hello World","date":"2015-08-31T03:03:15.000Z","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!--more-->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"title: Hello World\ndate: 2015-08-31 11:03:15\ncategories:\n- hexo学习\ntags:\n- Hexo\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!--more-->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2015-09-01T07:01:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cieinu1nb000i4ovhpyism609"},{"title":"LeetCode刷题之第一题——TwoSum","date":"2015-09-01T08:02:05.000Z","_content":"## 原题目\n> Given an array of integers, find two numbers such that they add up to a specific target number.\n\n> The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.\n\n> You may assume that each input would have exactly one solution.\n\n> Input: numbers={2, 7, 11, 15}, target=9\n> Output: index1=1, index2=2\n\n<!--more-->\n--------------\n## 原题网上翻译：\n> 给定一个整数数组，找出其中两个数满足相加等于你指定的目标数字。\n> 要求：这个函数twoSum必须要返回能够相加等于目标数字的两个数的索引，且index1必须要小于index2。请注意一点，你返回的结果（包括index1和index2）都不是基于0开始的。\n> 你可以假设每一个输入肯定只有一个结果。\n\n> 举例：\n> 输入：numbers={2, 7, 11, 15}, target = 9\n> 输出：index1 = 1, index2 = 2(不是基于0开始的)\n\n## 解法\n 这个解法是尝试多次相对较好的解法，显然还有更加好的解法。所以只供参考\n```bash\nimport java.util.Hashtable;\n\npublic class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int[] result = new int[2];\n\tHashtable<Integer, Integer> ht = new Hashtable<Integer, Integer>();\n        for (int i = 0; i < nums.length; i++) {\n            Integer n = ht.get(nums[i]);\n            if (n == null)\n        \tht.put(nums[i], i);\n            n = ht.get(target - nums[i]);\n        \t\n            if (n != null && n < i) {\n                result[0] = n + 1;\n                result[1] = i + 1;\n                \n                return result;\n            }\n        }\n        \n        return result;\n    }\n}\n```\n","source":"_posts/LeetCode刷题之第一题——TwoSum.md","raw":"title: LeetCode刷题之第一题——TwoSum\ndate: 2015-09-01 16:02:05\ncategories:\n- 学习\ntags:\n- leetcodt\n- java\n---\n## 原题目\n> Given an array of integers, find two numbers such that they add up to a specific target number.\n\n> The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.\n\n> You may assume that each input would have exactly one solution.\n\n> Input: numbers={2, 7, 11, 15}, target=9\n> Output: index1=1, index2=2\n\n<!--more-->\n--------------\n## 原题网上翻译：\n> 给定一个整数数组，找出其中两个数满足相加等于你指定的目标数字。\n> 要求：这个函数twoSum必须要返回能够相加等于目标数字的两个数的索引，且index1必须要小于index2。请注意一点，你返回的结果（包括index1和index2）都不是基于0开始的。\n> 你可以假设每一个输入肯定只有一个结果。\n\n> 举例：\n> 输入：numbers={2, 7, 11, 15}, target = 9\n> 输出：index1 = 1, index2 = 2(不是基于0开始的)\n\n## 解法\n 这个解法是尝试多次相对较好的解法，显然还有更加好的解法。所以只供参考\n```bash\nimport java.util.Hashtable;\n\npublic class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int[] result = new int[2];\n\tHashtable<Integer, Integer> ht = new Hashtable<Integer, Integer>();\n        for (int i = 0; i < nums.length; i++) {\n            Integer n = ht.get(nums[i]);\n            if (n == null)\n        \tht.put(nums[i], i);\n            n = ht.get(target - nums[i]);\n        \t\n            if (n != null && n < i) {\n                result[0] = n + 1;\n                result[1] = i + 1;\n                \n                return result;\n            }\n        }\n        \n        return result;\n    }\n}\n```\n","slug":"LeetCode刷题之第一题——TwoSum","published":1,"updated":"2015-09-01T08:22:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cieinu1nl000l4ovhijqu03q7"},{"title":"Android使用ant打包，集成到jenkins里面自动构建","date":"2015-09-16T12:32:05.000Z","_content":"## 先安装ant\n以下安装教程是mac系统的，至于win系统的安装，相信配合Google也很简单，这里就不再介绍。\nmac下安装ant很简单，就一条命令，前提是要安装了Homebrew，什么？你没安装Homebrew？？那不好意思，自己Google去。\n> 首先更新一下\n~~~bash\nbrew update\n~~~\n> 然后再执行\n~~~bash\nbrew install ant\n~~~\n<!--more-->\n这样就可以成功的安装了ant\n\n## 测试ant\n\n在终端直接输入\n~~~bash\nant\n~~~\n如果输出\n> Buildfile: build.xml does not exist!\n> Build failed\n\n那么恭喜你，ant安装成功！\n\n## 在Android工程下面生成ant脚本\n\n* 在sdk/tools目录下执行下面的命令，注意将命令里面的目录改成你的工程的目录，name后面的名字也改成你自己的工程名字\n~~~bash\nandroid update project --name dison --target  android-21 --path /Users/dison/Documents/workspace4.4/dison-ant-test\n~~~\n\n* 如果你的工程没问题，就会在目录下生成2个文件，build.xml和local.properties,打开local.properties，可看到其实是一个sdk环境配置\n\n* 在工程目录新建ant.properties，将下面的配置信息添加到该文件中，注意将keystore的信息改成你的\n> key.store=/home/android/xxxxxxx.releasekey\n> key.alias=android\n> key.store.password=password\n> key.alias.password=password\n\n* 修改工程里面的build.xml文件，因为build执行的target是help，这里我们要修改为release\n  如下：\n  \n~~~bash\n<target name=\"release\"\n       depends=\"clean, -set-release-mode, -release-obfuscation-check, -package, -post-package, -release-prompt-for-password, -release-nosign, -release-sign, -post-build\"\n       description=\"Builds the application in release mode.\">\n</target>\n\n<import file=\"${sdk.dir}/tools/ant/build.xml\" />\n~~~\n\n把文件头改为\n~~~bash\n\t<project name=\"cxy\" default=\"release\">\n~~~\n\n* 打包，直接在eclipse执行，或者使用ant release命令\n\n## 项目依赖处理\n如果你的项目依赖了别的项目，只需要在依赖的项目中也生成build.xml和local.properties，因为在project.properties中已经能读取到依赖关系，build.xml会根据这个文件自动依赖并打入包中的。\n依赖的项目不用修改build.xml文件\n\n## 把打包集合到jenkins\n* 系统配置修改，增加SSH Servers，即是打包编译后的系统的目标服务器，具体配置如图所示（只需要配置一次）\n![](http://120.24.60.216:4000/img/20150918133023.png)\n* 创建项目，点击jenkins主页左上角的新建\n![](http://120.24.60.216:4000/img/20150916211326.png)\n给项目起个名字，这里以车小丫为例，命名为cxy，之后选择自由风格创建项目\n* 配置项目svn路径，web项目和app项目都要配置，依赖的项目也要配置进来，最好配置在web项目和app项目的之前，如图\n![](http://120.24.60.216:4000/img/20150918142922.png)\n* 配置“构建”点“增加构建步骤“按钮，选择invoke Ant(如果无此选项，说明你没有安装ant插件，请安装插件），配置完“invoke Ant”点“Send files or execute commands over SSH“配置ssh\n具体配置如图\n![](http://120.24.60.216:4000/img/20150918144733.png)\n\n至此，Android使用ant打包，集成到jenkins里面自动构建就配置完成，其他项目也可以依样画葫芦自己实现了。\n\n# 转发请标明出处，谢谢！","source":"_posts/Android使用ant打包.md","raw":"title: Android使用ant打包，集成到jenkins里面自动构建\ndate: 2015-09-16 20:32:05\ncategories:\n- 学习\ntags:\n- Android\n- Ant\n---\n## 先安装ant\n以下安装教程是mac系统的，至于win系统的安装，相信配合Google也很简单，这里就不再介绍。\nmac下安装ant很简单，就一条命令，前提是要安装了Homebrew，什么？你没安装Homebrew？？那不好意思，自己Google去。\n> 首先更新一下\n~~~bash\nbrew update\n~~~\n> 然后再执行\n~~~bash\nbrew install ant\n~~~\n<!--more-->\n这样就可以成功的安装了ant\n\n## 测试ant\n\n在终端直接输入\n~~~bash\nant\n~~~\n如果输出\n> Buildfile: build.xml does not exist!\n> Build failed\n\n那么恭喜你，ant安装成功！\n\n## 在Android工程下面生成ant脚本\n\n* 在sdk/tools目录下执行下面的命令，注意将命令里面的目录改成你的工程的目录，name后面的名字也改成你自己的工程名字\n~~~bash\nandroid update project --name dison --target  android-21 --path /Users/dison/Documents/workspace4.4/dison-ant-test\n~~~\n\n* 如果你的工程没问题，就会在目录下生成2个文件，build.xml和local.properties,打开local.properties，可看到其实是一个sdk环境配置\n\n* 在工程目录新建ant.properties，将下面的配置信息添加到该文件中，注意将keystore的信息改成你的\n> key.store=/home/android/xxxxxxx.releasekey\n> key.alias=android\n> key.store.password=password\n> key.alias.password=password\n\n* 修改工程里面的build.xml文件，因为build执行的target是help，这里我们要修改为release\n  如下：\n  \n~~~bash\n<target name=\"release\"\n       depends=\"clean, -set-release-mode, -release-obfuscation-check, -package, -post-package, -release-prompt-for-password, -release-nosign, -release-sign, -post-build\"\n       description=\"Builds the application in release mode.\">\n</target>\n\n<import file=\"${sdk.dir}/tools/ant/build.xml\" />\n~~~\n\n把文件头改为\n~~~bash\n\t<project name=\"cxy\" default=\"release\">\n~~~\n\n* 打包，直接在eclipse执行，或者使用ant release命令\n\n## 项目依赖处理\n如果你的项目依赖了别的项目，只需要在依赖的项目中也生成build.xml和local.properties，因为在project.properties中已经能读取到依赖关系，build.xml会根据这个文件自动依赖并打入包中的。\n依赖的项目不用修改build.xml文件\n\n## 把打包集合到jenkins\n* 系统配置修改，增加SSH Servers，即是打包编译后的系统的目标服务器，具体配置如图所示（只需要配置一次）\n![](http://120.24.60.216:4000/img/20150918133023.png)\n* 创建项目，点击jenkins主页左上角的新建\n![](http://120.24.60.216:4000/img/20150916211326.png)\n给项目起个名字，这里以车小丫为例，命名为cxy，之后选择自由风格创建项目\n* 配置项目svn路径，web项目和app项目都要配置，依赖的项目也要配置进来，最好配置在web项目和app项目的之前，如图\n![](http://120.24.60.216:4000/img/20150918142922.png)\n* 配置“构建”点“增加构建步骤“按钮，选择invoke Ant(如果无此选项，说明你没有安装ant插件，请安装插件），配置完“invoke Ant”点“Send files or execute commands over SSH“配置ssh\n具体配置如图\n![](http://120.24.60.216:4000/img/20150918144733.png)\n\n至此，Android使用ant打包，集成到jenkins里面自动构建就配置完成，其他项目也可以依样画葫芦自己实现了。\n\n# 转发请标明出处，谢谢！","slug":"Android使用ant打包","published":1,"updated":"2015-09-18T07:16:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigkgex7j0000b0vhtnbdikt3"},{"title":"简化 Storyboard","date":"2015-11-03T03:01:15.000Z","_content":"\n在学习iOS开发的过程中，平时的界面布局都是使用Storyboard的，突然想到这样布局有个不好的地方，假如界面复杂了，\n管理起来很不方便，并且在团队开发的过程很操蛋，每个人都修改一下，在代码提交的时候那真的是要骂娘了。幸好，iOS9提供了Storyboard References这个概念！！！\n这里简单记录一下我的学习过程。\n<!--more-->\n\n## 首先创建一个简单的项目，进行一些前驱的布局\n\n完整的[项目地址](https://github.com/chendisun/Storyboard.git \"\")\n下面是我先布局截图，有点模糊，将就看吧，详细可以看项目里面的Main1.Storyboard\n![](http://120.24.60.216:4000/img/20151103110010.png)\n\n\n## 开始简化\n这里我使用了TabBarController作为初始的viewController。这个TabBarController拥有两个NvigationController，每个对应一个不同的根ViewController，\n每个ViewController里面都一个按钮可以去到一个共同的ViewController。\n\n> 这里的思路是先把todo的ViewController单独抽为一个Storyboard，选中这个ViewController（高亮为选中），点击Xcode的导航栏，选择``` Editor->Refactor to Storyboard ```\n> 这里给Storyboard起名为Todo，创建后，新的Storyboard呈现打开的状态\n\n![](http://120.24.60.216:4000/img/20151103160455.png)\n\n这个时候Main1.Storyboard里面的那两个ViewController都是指定到一个外接Storyboard了\n\n> 之后把TabBarController左边的流程抽取到一个新的Storyboard里，选择所要抽取的NvigationController和ViewController（高亮为选中），选择 Editor->Refactor to Storyboard\n> 这里给Storyboard起名为One，创建后，新的Storyboard呈现也是打开的状态\n\n![](http://120.24.60.216:4000/img/20151103161035.png)\n\n> 同理把另一个流程也抽取了\n\n![](http://120.24.60.216:4000/img/20151103161226.png)\n\n> 这时Main.Storyboard剩余为\n\n![](http://120.24.60.216:4000/img/20151103161333.png)\n\n到这里这个重构让我们的Storyboard变的更加的简单化，模块化，组件化。可以帮助我们后面更好的开发这个应用\n\n## 跳转到新建的Storyboard\n\n上面的方式是抽取已有的Storyboard的，那么假如我们要新增一个Storyboard，再通过指定的按钮跳转，要怎么实现呢？\n\n> 新建一个Three.Storyboard，里面什么都不用干，只是简单的一个ViewController和一个Label\n\n![](http://120.24.60.216:4000/img/20151103170057.png)\n\n> 回到Two.Storyboard，添加一个Bar Button，起名为Three，用来跳转的。拖建一个Storyboard Reference，Storyboard 属性选为“Three”，把 Referenced ID 属性设置为“ThreeViewCL”\n> 选中“Three”的按钮，按住 Control 健和鼠标左键，拖拽到 storyboard reference上，创建了一个 segue。\n> 选中Three.Storyboard，设置 Storyboard ID 为 “ThreeViewCL”，这样就可以实现了跳转。\n\n![](http://120.24.60.216:4000/img/20151103171005.png)\n\n# 转发请标明出处，谢谢！","source":"_posts/简化Storyboard.md","raw":"title: 简化 Storyboard\ndate: 2015-11-03 11:01:15\ncategories:\n- 学习\ntags:\n- swift iOS \n---\n\n在学习iOS开发的过程中，平时的界面布局都是使用Storyboard的，突然想到这样布局有个不好的地方，假如界面复杂了，\n管理起来很不方便，并且在团队开发的过程很操蛋，每个人都修改一下，在代码提交的时候那真的是要骂娘了。幸好，iOS9提供了Storyboard References这个概念！！！\n这里简单记录一下我的学习过程。\n<!--more-->\n\n## 首先创建一个简单的项目，进行一些前驱的布局\n\n完整的[项目地址](https://github.com/chendisun/Storyboard.git \"\")\n下面是我先布局截图，有点模糊，将就看吧，详细可以看项目里面的Main1.Storyboard\n![](http://120.24.60.216:4000/img/20151103110010.png)\n\n\n## 开始简化\n这里我使用了TabBarController作为初始的viewController。这个TabBarController拥有两个NvigationController，每个对应一个不同的根ViewController，\n每个ViewController里面都一个按钮可以去到一个共同的ViewController。\n\n> 这里的思路是先把todo的ViewController单独抽为一个Storyboard，选中这个ViewController（高亮为选中），点击Xcode的导航栏，选择``` Editor->Refactor to Storyboard ```\n> 这里给Storyboard起名为Todo，创建后，新的Storyboard呈现打开的状态\n\n![](http://120.24.60.216:4000/img/20151103160455.png)\n\n这个时候Main1.Storyboard里面的那两个ViewController都是指定到一个外接Storyboard了\n\n> 之后把TabBarController左边的流程抽取到一个新的Storyboard里，选择所要抽取的NvigationController和ViewController（高亮为选中），选择 Editor->Refactor to Storyboard\n> 这里给Storyboard起名为One，创建后，新的Storyboard呈现也是打开的状态\n\n![](http://120.24.60.216:4000/img/20151103161035.png)\n\n> 同理把另一个流程也抽取了\n\n![](http://120.24.60.216:4000/img/20151103161226.png)\n\n> 这时Main.Storyboard剩余为\n\n![](http://120.24.60.216:4000/img/20151103161333.png)\n\n到这里这个重构让我们的Storyboard变的更加的简单化，模块化，组件化。可以帮助我们后面更好的开发这个应用\n\n## 跳转到新建的Storyboard\n\n上面的方式是抽取已有的Storyboard的，那么假如我们要新增一个Storyboard，再通过指定的按钮跳转，要怎么实现呢？\n\n> 新建一个Three.Storyboard，里面什么都不用干，只是简单的一个ViewController和一个Label\n\n![](http://120.24.60.216:4000/img/20151103170057.png)\n\n> 回到Two.Storyboard，添加一个Bar Button，起名为Three，用来跳转的。拖建一个Storyboard Reference，Storyboard 属性选为“Three”，把 Referenced ID 属性设置为“ThreeViewCL”\n> 选中“Three”的按钮，按住 Control 健和鼠标左键，拖拽到 storyboard reference上，创建了一个 segue。\n> 选中Three.Storyboard，设置 Storyboard ID 为 “ThreeViewCL”，这样就可以实现了跳转。\n\n![](http://120.24.60.216:4000/img/20151103171005.png)\n\n# 转发请标明出处，谢谢！","slug":"简化Storyboard","published":1,"updated":"2015-11-03T09:22:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigkgex890006b0vhe8jfzomx"},{"title":"markdown基本语法","date":"2015-09-01T10:16:15.000Z","_content":"\n## 标题\n\n~~~html\n#  H1\n##  H2\n###  H3\n####  H4\n#####  H5\n######  H6\n~~~\n另外，H1和H2还能用以下方式显示：\n~~~html\n一级标题\n===\n \n二级标题\n---\n~~~\n<!--more-->\n\n## 文本强调\n~~~html\n*斜体* or _强调_\n**加粗** or __加粗__\n***粗斜体*** or ___粗斜体__\n~~~\n但是，如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号：这是一段* 文本强调 *的说明示例。\n如果要在文字前后直接插入普通的星号或底线，你可以用反斜线（转义符）：\\\n\n## 列表\n\n--- 无序列表\n~~~html\n* 无序列表\n* 无序列表\n* 无序列表\n\n+ 无序列表\n+ 无序列表\n+ 无序列表\n\n- 无序列表\n- 无序列表\n- 无序列表\n~~~\n\n--- 有序列表\n~~~html\n1. 第一行\n2. 第二行\n3. 第三行\n~~~\n\n## 连接（title为可选项）\n~~~html\n内嵌方式：\n[link text](https://www.google.com \"title text\")\n \n引用方式：\n[link text][id]\n[id]: https://www.mozilla.org \"title text\"\n \n引用存储文件：\n[link text](../path/file/readme.text \"title text\")\n \n还能这样使用：\n[link text][]\n[link text]: http://www.reddit.com\n \nEmail 邮件：\n<example@example.com>\n~~~\n\n## 图片\n~~~html\n内嵌方式：\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"title text\")\n \n引用方式：\n![alt text][logo]\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"title text\"\n~~~\n## 代码和语法高亮\n标记一小段行内代码：\n\n本文是一篇介绍`Markdown`的语法的文章\n \n如果高亮的内容包含`号，可以这样写：\n~~~bash\n`` `包裹起来` ``\n~~~\n \n语法高亮：\n~~~bash\n```html\n    <div>Syntax Highlighting</div>\n```\n\n```css\n    body{font-size:12px}\n```\n \n```javascript\n    var s = \"JavaScript syntax highlighting\";\n    alert(s);\n```\n```php\n    <?php\n      echo \"hello, world!\";\n    ?>\n```\n```python\n    s = \"Python syntax highlighting\"\n    print s\n```\n~~~\n\n## 水平分割线\n```html\n***\n* * *\n- - -\n```\n\n## 转义符(反斜杠)\nMarkdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果，你可以在星号的前面加上反斜杠：\n```html\n\\*literal asterisks\\*\n```\n\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n```html\n\\反斜杠  `反引号  *星号  _下划线  {}花括号  []方括号  ()括弧  #井字号  +加号  -减号  .英文句 !感叹号\n```\n\n## 补充\nMarkdown也支持传统的HTML标签。\n比如一个链接，你不太喜欢Markdown的写法，也可以直接写成\n```html\n<a href=\"http://www.baidu.com\">百度</a>\n```\n\n\n\n# 转发请标明出处，谢谢！","source":"_posts/markdown语法.md","raw":"title: markdown基本语法\ndate: 2015-09-01 18:16:15\ncategories:\n- 学习\ntags:\n- markdown\n---\n\n## 标题\n\n~~~html\n#  H1\n##  H2\n###  H3\n####  H4\n#####  H5\n######  H6\n~~~\n另外，H1和H2还能用以下方式显示：\n~~~html\n一级标题\n===\n \n二级标题\n---\n~~~\n<!--more-->\n\n## 文本强调\n~~~html\n*斜体* or _强调_\n**加粗** or __加粗__\n***粗斜体*** or ___粗斜体__\n~~~\n但是，如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号：这是一段* 文本强调 *的说明示例。\n如果要在文字前后直接插入普通的星号或底线，你可以用反斜线（转义符）：\\\n\n## 列表\n\n--- 无序列表\n~~~html\n* 无序列表\n* 无序列表\n* 无序列表\n\n+ 无序列表\n+ 无序列表\n+ 无序列表\n\n- 无序列表\n- 无序列表\n- 无序列表\n~~~\n\n--- 有序列表\n~~~html\n1. 第一行\n2. 第二行\n3. 第三行\n~~~\n\n## 连接（title为可选项）\n~~~html\n内嵌方式：\n[link text](https://www.google.com \"title text\")\n \n引用方式：\n[link text][id]\n[id]: https://www.mozilla.org \"title text\"\n \n引用存储文件：\n[link text](../path/file/readme.text \"title text\")\n \n还能这样使用：\n[link text][]\n[link text]: http://www.reddit.com\n \nEmail 邮件：\n<example@example.com>\n~~~\n\n## 图片\n~~~html\n内嵌方式：\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"title text\")\n \n引用方式：\n![alt text][logo]\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"title text\"\n~~~\n## 代码和语法高亮\n标记一小段行内代码：\n\n本文是一篇介绍`Markdown`的语法的文章\n \n如果高亮的内容包含`号，可以这样写：\n~~~bash\n`` `包裹起来` ``\n~~~\n \n语法高亮：\n~~~bash\n```html\n    <div>Syntax Highlighting</div>\n```\n\n```css\n    body{font-size:12px}\n```\n \n```javascript\n    var s = \"JavaScript syntax highlighting\";\n    alert(s);\n```\n```php\n    <?php\n      echo \"hello, world!\";\n    ?>\n```\n```python\n    s = \"Python syntax highlighting\"\n    print s\n```\n~~~\n\n## 水平分割线\n```html\n***\n* * *\n- - -\n```\n\n## 转义符(反斜杠)\nMarkdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果，你可以在星号的前面加上反斜杠：\n```html\n\\*literal asterisks\\*\n```\n\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n```html\n\\反斜杠  `反引号  *星号  _下划线  {}花括号  []方括号  ()括弧  #井字号  +加号  -减号  .英文句 !感叹号\n```\n\n## 补充\nMarkdown也支持传统的HTML标签。\n比如一个链接，你不太喜欢Markdown的写法，也可以直接写成\n```html\n<a href=\"http://www.baidu.com\">百度</a>\n```\n\n\n\n# 转发请标明出处，谢谢！","slug":"markdown语法","published":1,"updated":"2015-09-29T11:00:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigkgex8e000ab0vhrsznywi5"},{"title":"iOS实现信用卡号扫描-swift版","date":"2015-11-02T03:43:15.000Z","_content":"\n## 下载第三方的组件CaidIO\n\n* 实现信用卡号的扫描使用的是第三方的包，详细的简介可以到github上查看，在github搜索CardIO就行，这里提供百度网盘的下载地址：[CardIO](http://pan.baidu.com/s/1jGGWiCu \"\")\n下载好之后解压，后续导入到我们的项目中。\n\n<!--more-->\n\n* 把链接目标Build Setting - Linking - Other Linker Flag : -lc++\n   如图：![](http://120.24.60.216:4000/img/20151102113923.png)\n* 导入相关的框架，详细如图\n![](http://120.24.60.216:4000/img/20151102114045.png)\n\n## 创建一个object-c的文件，桥接CardIO的头文件\n只要输入一行代码，就可以把oc代码翻译成了swift的代码了\n``` bash\n#import \"CardIO.h\"\n```\n\n## 搭建简单的页面，在主界面里面直接拖一个按钮和一个label，按钮触发扫描的开始\n\nbutton的IBAction方法添加下面的代码\n``` bash\n//构造controller\nlet cardIOPVC = CardIOPaymentViewController(paymentDelegate: self)\n//设置样式\ncardIOPVC.modalPresentationStyle = UIModalPresentationStyle.FormSheet\n//启动扫描界面\npresentViewController(cardIOPVC, animated: true, completion: nil)\n```\n## 主页面实现CardIOPaymentViewControllerDelegate协议\n\n实现协议的方法\n``` bash\nfunc userDidCancelPaymentViewController(paymentViewController: CardIOPaymentViewController!) {\n    result.text = \"Cancel!!!\"\n    paymentViewController.dismissViewControllerAnimated(true, completion: nil)\n}\n\nfunc userDidProvideCreditCardInfo(cardInfo: CardIOCreditCardInfo!, inPaymentViewController paymentViewController: CardIOPaymentViewController!) {\n    if let info = cardInfo {\n         result.text = info.cardNumber\n    }\n        \n    paymentViewController.dismissViewControllerAnimated(true, completion: nil)\n}\n```\n## 到这里就可以实现信用卡的扫描并且返回结果了\n\n[项目地址](https://github.com/chendisun/CardIOTest.git \"\")\n\n\n\n# 转发请标明出处，谢谢！","source":"_posts/iOS扫描银行卡号-swift版.md","raw":"title: iOS实现信用卡号扫描-swift版\ndate: 2015-11-02 11:43:15\ncategories:\n- 学习\ntags:\n- swift iOS \n---\n\n## 下载第三方的组件CaidIO\n\n* 实现信用卡号的扫描使用的是第三方的包，详细的简介可以到github上查看，在github搜索CardIO就行，这里提供百度网盘的下载地址：[CardIO](http://pan.baidu.com/s/1jGGWiCu \"\")\n下载好之后解压，后续导入到我们的项目中。\n\n<!--more-->\n\n* 把链接目标Build Setting - Linking - Other Linker Flag : -lc++\n   如图：![](http://120.24.60.216:4000/img/20151102113923.png)\n* 导入相关的框架，详细如图\n![](http://120.24.60.216:4000/img/20151102114045.png)\n\n## 创建一个object-c的文件，桥接CardIO的头文件\n只要输入一行代码，就可以把oc代码翻译成了swift的代码了\n``` bash\n#import \"CardIO.h\"\n```\n\n## 搭建简单的页面，在主界面里面直接拖一个按钮和一个label，按钮触发扫描的开始\n\nbutton的IBAction方法添加下面的代码\n``` bash\n//构造controller\nlet cardIOPVC = CardIOPaymentViewController(paymentDelegate: self)\n//设置样式\ncardIOPVC.modalPresentationStyle = UIModalPresentationStyle.FormSheet\n//启动扫描界面\npresentViewController(cardIOPVC, animated: true, completion: nil)\n```\n## 主页面实现CardIOPaymentViewControllerDelegate协议\n\n实现协议的方法\n``` bash\nfunc userDidCancelPaymentViewController(paymentViewController: CardIOPaymentViewController!) {\n    result.text = \"Cancel!!!\"\n    paymentViewController.dismissViewControllerAnimated(true, completion: nil)\n}\n\nfunc userDidProvideCreditCardInfo(cardInfo: CardIOCreditCardInfo!, inPaymentViewController paymentViewController: CardIOPaymentViewController!) {\n    if let info = cardInfo {\n         result.text = info.cardNumber\n    }\n        \n    paymentViewController.dismissViewControllerAnimated(true, completion: nil)\n}\n```\n## 到这里就可以实现信用卡的扫描并且返回结果了\n\n[项目地址](https://github.com/chendisun/CardIOTest.git \"\")\n\n\n\n# 转发请标明出处，谢谢！","slug":"iOS扫描银行卡号-swift版","published":1,"updated":"2015-11-02T10:04:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigkgex8i000eb0vh7g1imidl"},{"title":"React Native图片轮播实现","date":"2015-10-08T02:56:15.000Z","_content":"\n## 下载第三方的组件react-native-swiper\n\n* 这里的轮播实现我使用的是第三方的组件，详细的简介可以到github上查看，github地址是：[https://github.com/leecade/react-native-swiper](https://github.com/leecade/react-native-swiper \"\")\n在项目的根目录执行如下命令安装模块：\n\n~~~bash\n$ npm install react-native-swiper --save\n$ npm i react-timer-mixin --save\n~~~\n\n<!--more-->\n\n* 需要关闭React packager命令行和模拟器，在xcode中重启项目\n\n## 代码修改\n\n* 首先使用require引入react-native-swiper\n~~~javascript\nvar Swiper = require('react-native-swiper');\n~~~\n\n* 使用swiper,将轮播封装成单独的组件\n\n~~~javascript\nvar Slider = React.createClass({\n    render: function(){\n    return (\n      <Swiper showsButtons={true} autoplay={true} showsPagination={true}>\n        <View style={{backgroundColor: 'red',flex: 1}}></View>\n        <View style={{backgroundColor: 'blue',flex: 1}}></View>\n        <View style={{backgroundColor: 'green',flex: 1}}></View>\n      </Swiper>\n    );\n  }\n});\n~~~\n\n* 这样可以直接在render的时候直接用：<Slider/>\n\n~~~javascript\nvar aaa = React.createClass({\n  render: function() {\n    return (\n      <View style={styles.aaa}>\n        <Slider/>\n      </View>\n    );\n  }\n});\n~~~\n\n* 效果图\n![](http://120.24.60.216:4000/img/20151008111535.png)\n\n\n\n\n\n# 转发请标明出处，谢谢！","source":"_posts/how to ues react-native-swiper.md","raw":"title: React Native图片轮播实现\ndate: 2015-10-08 10:56:15\ncategories:\n- 学习\ntags:\n- React Native iOS Android\n---\n\n## 下载第三方的组件react-native-swiper\n\n* 这里的轮播实现我使用的是第三方的组件，详细的简介可以到github上查看，github地址是：[https://github.com/leecade/react-native-swiper](https://github.com/leecade/react-native-swiper \"\")\n在项目的根目录执行如下命令安装模块：\n\n~~~bash\n$ npm install react-native-swiper --save\n$ npm i react-timer-mixin --save\n~~~\n\n<!--more-->\n\n* 需要关闭React packager命令行和模拟器，在xcode中重启项目\n\n## 代码修改\n\n* 首先使用require引入react-native-swiper\n~~~javascript\nvar Swiper = require('react-native-swiper');\n~~~\n\n* 使用swiper,将轮播封装成单独的组件\n\n~~~javascript\nvar Slider = React.createClass({\n    render: function(){\n    return (\n      <Swiper showsButtons={true} autoplay={true} showsPagination={true}>\n        <View style={{backgroundColor: 'red',flex: 1}}></View>\n        <View style={{backgroundColor: 'blue',flex: 1}}></View>\n        <View style={{backgroundColor: 'green',flex: 1}}></View>\n      </Swiper>\n    );\n  }\n});\n~~~\n\n* 这样可以直接在render的时候直接用：<Slider/>\n\n~~~javascript\nvar aaa = React.createClass({\n  render: function() {\n    return (\n      <View style={styles.aaa}>\n        <Slider/>\n      </View>\n    );\n  }\n});\n~~~\n\n* 效果图\n![](http://120.24.60.216:4000/img/20151008111535.png)\n\n\n\n\n\n# 转发请标明出处，谢谢！","slug":"how to ues react-native-swiper","published":1,"updated":"2015-10-08T03:17:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigkgex8n000hb0vh1k95hec1"},{"title":"使用React Native 构建app","date":"2015-09-24T12:32:05.000Z","_content":"## React Native的优势和劣势（借鉴网络）：\n\n* React Native的优势：\n\n> 相对Hybird app或者Webapp：\n> 1. 不用Webview，彻底摆脱了Webview让人不爽的交互和性能问题\n> 2. 有较强的扩展性，这是因为Native端提供的是基本控件，JS可以自由组合使用\n> 3. 可以直接使用Native原生的「牛逼」动画（在FB Group这个app里面，面板滑出带一点果冻弹动，面板基于某个点展开这种动画随处可见，这种动画用Native code来做小菜一碟，但是用Web来做就难上加难）。\n> 相对于Native app：\n> 可以通过更新远端JS，直接更新app，不过这快成为各家大型Native app的标配了…\n\n* 劣势：\n\n> 扩展性仍然远远不如web，也远远不如直接写Native code（这个不用废话解释了吧）\n> 从Native到Web，要做很多概念转换，势必造成双方都要妥协。最终web要用一套CSS的阉割版，Native要费劲地把这个阉割版转换成native原生的表达方式（比如iOS的Constraint\\origin\\Center等属性），两边都会不爽。\n\n<!--more-->\n\n## 搭建环境\n这个环境搭建很简单，网上有很多教程，这里就不多说了，官方的文档介绍主要需要安装nvm, Node.js 4.0, watchman, flow。\n在mac环境下安装了Homebrew，这些东东是很容易安装的。\n\n## 开始 Hello World\n\n环境准备好了之后，在终端直接输入\n\n~~~bash\n$ react-native init Test\n$ cd Test/\n~~~\n如果是运行iOS平台，使用Xcode打开iOS工程直接运行即可。\niOS运行结果如下：\n![](http://120.24.60.216:4000/img/20150924094142.png)\n如果出现```Unable to download JS bundle```即是没有启动server端，在Test的目录下执行\n~~~bash\nreact-native start\n~~~\n至此，iOS的运行应该没问题了。\n恭喜你，React Native安装成功！\n\n如果只是iOS版本，总感觉少了什么，也体现不出React Native优势所在，React Native就是跨平台开发的，人家 React Native 的重点放在所有开发人员关心的平台的开发效率上——开发者只需学习一种语言就能轻易为任何平台高效地编写代码。\nFacebook也很给力，2015年9月15号比预计提前发布了安卓版本，那么激动人心的安卓运行就要来了。\n\n## Android 调试\n\n首先请插入你的调试机器。之后在Test目录下运行\n~~~bash\n$ react-native run-android\n~~~\n激动了半天，结果居然是构建失败，此刻的心情就像是准备提枪上阵的时候，妹子居然穿衣服走人了一样。\n泪水不能解决问题，查看失败的原因，原来是```> failed to find Build Tools revision 23.0.1```，即是Android sdk 没有23版本，操蛋啊，要更新这个鬼，天朝的局域网，呵呵。\n一顿折腾之后，终于把该死的sdk更新了，这下，小妞你跑不了了吧！\n\n再次执行\n~~~bash\n$ react-native run-android\n~~~\n\napp终于构建成功了，但是该死的，有出现了```Unable to download JS bundle```，检查server端已经开启了。\n![](http://120.24.60.216:4000/img/20150924104521.png)\n\n一番折腾，此处省略10000字国骂。。。。。。。。\n\n明明按照步骤执行的，为啥就不行了呢？？？拿着我的烂三星，突然想到太妈的网络不一致啊，怎么可能加载得了js啊，你是猪吗？我想到了这句台词。\n\n查找Facebook文档说真机调试要执行\n~~~bash\n$ adb reverse tcp:8081 tcp:8081\n~~~\n\n再次操蛋的是，我运行后居然打印\n~~~bash\nerror: closed\nerror: closed\n~~~\n什么鬼，我就好欺负吗？？？为啥我的就不行？？？\n好吧，我上Google再看看，原来是我的机器是Android4.4的，而上面的命令只适合Android5.0，此刻，心中一万个草泥马奔腾而过。\n要解决上面的问题只能在手机上面输入server端ip。好吧，来吧。\n\n* 晃动手机，在出现的菜单选择```Dev Settings```，之后选择```Debug server host for device```，在弹出的窗口中输入server端的ip，之后再```Reload JS```就可以愉快地玩啥了！！！\n\n至此，两个平台的app都可以爽快的运行调试了。之后你想干嘛就干嘛啦，你懂的！\n\n\n# 转发请标明出处，谢谢！","source":"_posts/Use React Native Development App.md","raw":"title: 使用React Native 构建app\ndate: 2015-09-24 20:32:05\ncategories:\n- 学习\ntags:\n- Android\n- iOS\n- React Native\n---\n## React Native的优势和劣势（借鉴网络）：\n\n* React Native的优势：\n\n> 相对Hybird app或者Webapp：\n> 1. 不用Webview，彻底摆脱了Webview让人不爽的交互和性能问题\n> 2. 有较强的扩展性，这是因为Native端提供的是基本控件，JS可以自由组合使用\n> 3. 可以直接使用Native原生的「牛逼」动画（在FB Group这个app里面，面板滑出带一点果冻弹动，面板基于某个点展开这种动画随处可见，这种动画用Native code来做小菜一碟，但是用Web来做就难上加难）。\n> 相对于Native app：\n> 可以通过更新远端JS，直接更新app，不过这快成为各家大型Native app的标配了…\n\n* 劣势：\n\n> 扩展性仍然远远不如web，也远远不如直接写Native code（这个不用废话解释了吧）\n> 从Native到Web，要做很多概念转换，势必造成双方都要妥协。最终web要用一套CSS的阉割版，Native要费劲地把这个阉割版转换成native原生的表达方式（比如iOS的Constraint\\origin\\Center等属性），两边都会不爽。\n\n<!--more-->\n\n## 搭建环境\n这个环境搭建很简单，网上有很多教程，这里就不多说了，官方的文档介绍主要需要安装nvm, Node.js 4.0, watchman, flow。\n在mac环境下安装了Homebrew，这些东东是很容易安装的。\n\n## 开始 Hello World\n\n环境准备好了之后，在终端直接输入\n\n~~~bash\n$ react-native init Test\n$ cd Test/\n~~~\n如果是运行iOS平台，使用Xcode打开iOS工程直接运行即可。\niOS运行结果如下：\n![](http://120.24.60.216:4000/img/20150924094142.png)\n如果出现```Unable to download JS bundle```即是没有启动server端，在Test的目录下执行\n~~~bash\nreact-native start\n~~~\n至此，iOS的运行应该没问题了。\n恭喜你，React Native安装成功！\n\n如果只是iOS版本，总感觉少了什么，也体现不出React Native优势所在，React Native就是跨平台开发的，人家 React Native 的重点放在所有开发人员关心的平台的开发效率上——开发者只需学习一种语言就能轻易为任何平台高效地编写代码。\nFacebook也很给力，2015年9月15号比预计提前发布了安卓版本，那么激动人心的安卓运行就要来了。\n\n## Android 调试\n\n首先请插入你的调试机器。之后在Test目录下运行\n~~~bash\n$ react-native run-android\n~~~\n激动了半天，结果居然是构建失败，此刻的心情就像是准备提枪上阵的时候，妹子居然穿衣服走人了一样。\n泪水不能解决问题，查看失败的原因，原来是```> failed to find Build Tools revision 23.0.1```，即是Android sdk 没有23版本，操蛋啊，要更新这个鬼，天朝的局域网，呵呵。\n一顿折腾之后，终于把该死的sdk更新了，这下，小妞你跑不了了吧！\n\n再次执行\n~~~bash\n$ react-native run-android\n~~~\n\napp终于构建成功了，但是该死的，有出现了```Unable to download JS bundle```，检查server端已经开启了。\n![](http://120.24.60.216:4000/img/20150924104521.png)\n\n一番折腾，此处省略10000字国骂。。。。。。。。\n\n明明按照步骤执行的，为啥就不行了呢？？？拿着我的烂三星，突然想到太妈的网络不一致啊，怎么可能加载得了js啊，你是猪吗？我想到了这句台词。\n\n查找Facebook文档说真机调试要执行\n~~~bash\n$ adb reverse tcp:8081 tcp:8081\n~~~\n\n再次操蛋的是，我运行后居然打印\n~~~bash\nerror: closed\nerror: closed\n~~~\n什么鬼，我就好欺负吗？？？为啥我的就不行？？？\n好吧，我上Google再看看，原来是我的机器是Android4.4的，而上面的命令只适合Android5.0，此刻，心中一万个草泥马奔腾而过。\n要解决上面的问题只能在手机上面输入server端ip。好吧，来吧。\n\n* 晃动手机，在出现的菜单选择```Dev Settings```，之后选择```Debug server host for device```，在弹出的窗口中输入server端的ip，之后再```Reload JS```就可以愉快地玩啥了！！！\n\n至此，两个平台的app都可以爽快的运行调试了。之后你想干嘛就干嘛啦，你懂的！\n\n\n# 转发请标明出处，谢谢！","slug":"Use React Native Development App","published":1,"updated":"2015-09-24T02:57:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigkgex8r000lb0vhg0u7wcy2"},{"title":"iOS版React-Native使用NavigatorIOS","date":"2015-09-29T10:16:15.000Z","_content":"用React-Native开发iOS应用的时候，大多数情况下我们要使用导航栏的，这里简单对导航栏做个使用记录\n\n## 定义NavigatorIOS\n\n~~~javascript\nvar {\n  AppRegistry,\n  StyleSheet,\n  NavigatorIOS,\n  View,\n  Text,\n} = React;\n\n~~~\n<!--more-->\n\n可以看到在React里面我定义了一个NavigatorIOS，这样后面的代码就可以调用NavigatorIOS了。\n\n## 使用NavigatorIOS\n\n~~~javascript\nvar HelloWorld = React.createClass({\n  render: function() {\n    return (\n      <NavigatorIOS\n        style={styles.container}\n        initialRoute={{\n            title: '首页',\n            component: aaa,\n        }}\n      />\n    );\n  }\n});\n~~~\n\n这里NavigatorIOS里面需要使用aaa面板，所以要创建aaa类\n\n~~~javascript\nvar aaa = React.createClass({\n  render: function() {\n    return (\n      <View style={styles.aaa}><Text style={styles.bbb}>你妹</Text></View>\n    );\n  }\n});\n~~~\n\n## styles修改\n\n~~~javascript\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  aaa: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  bbb: {\n    fontSize: 15,\n    color: 'blue'\n  }\n});\n~~~\n\n## 运行结果如下\n![](http://120.24.60.216:4000/img/20150929181355.png)\n\n\n\n\n\n# 转发请标明出处，谢谢！","source":"_posts/React Native use NavigatorIOS.md","raw":"title: iOS版React-Native使用NavigatorIOS\ndate: 2015-09-29 18:16:15\ncategories:\n- 学习\ntags:\n- iOS\n- React Native\n---\n用React-Native开发iOS应用的时候，大多数情况下我们要使用导航栏的，这里简单对导航栏做个使用记录\n\n## 定义NavigatorIOS\n\n~~~javascript\nvar {\n  AppRegistry,\n  StyleSheet,\n  NavigatorIOS,\n  View,\n  Text,\n} = React;\n\n~~~\n<!--more-->\n\n可以看到在React里面我定义了一个NavigatorIOS，这样后面的代码就可以调用NavigatorIOS了。\n\n## 使用NavigatorIOS\n\n~~~javascript\nvar HelloWorld = React.createClass({\n  render: function() {\n    return (\n      <NavigatorIOS\n        style={styles.container}\n        initialRoute={{\n            title: '首页',\n            component: aaa,\n        }}\n      />\n    );\n  }\n});\n~~~\n\n这里NavigatorIOS里面需要使用aaa面板，所以要创建aaa类\n\n~~~javascript\nvar aaa = React.createClass({\n  render: function() {\n    return (\n      <View style={styles.aaa}><Text style={styles.bbb}>你妹</Text></View>\n    );\n  }\n});\n~~~\n\n## styles修改\n\n~~~javascript\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  aaa: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  bbb: {\n    fontSize: 15,\n    color: 'blue'\n  }\n});\n~~~\n\n## 运行结果如下\n![](http://120.24.60.216:4000/img/20150929181355.png)\n\n\n\n\n\n# 转发请标明出处，谢谢！","slug":"React Native use NavigatorIOS","published":1,"updated":"2015-09-29T10:36:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigkgex8w000rb0vhxu50g0ns"},{"title":"React Native 如何知道该组件支持哪些样式呢","date":"2015-09-25T08:32:05.000Z","_content":"在用React Native开发的时候，有些组件的样式我们会不知道，但是我们怎样才能知道组件支持什么样式呢？\n查看文档是一个好方法，但是查看文档毕竟不够方便，下面我介绍一种比较实用的方法。\n\n## 修改index.ios.js代码\n\n~~~bash\n'use strict';\n\nvar React = require('react-native');\nvar {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View,\n  Image,\n} = React;\n\nvar HelloWorld = React.createClass({\n  render: function() {\n    return (\n      <View>\n          <View style={styles.style_1}>\n\n          </View>\n      </View>\n    );\n  }\n});\n\nvar styles = StyleSheet.create({\n  style_1: {\n    height:40,\n    borderWidth: 1,\n    borderColor: 'red',\n    aaa: 's'\n  },\n});\n\nAppRegistry.registerComponent('HelloWorld', () => HelloWorld);\n\n~~~\n<!--more-->\n\n可以看到在styles里面的样式style_1里，我乱写了一个样式```aaa: 's'```，这时运行工程，就会看到如下的结果\n![](http://120.24.60.216:4000/img/20150925162728.png)\n\n这个时候我们就可以看到当前组件支持的样式了，是不是很简单？但是这个方法必须写到样式的创建中去，而不能写为内联样式。写成内联样式，你是看不到报错提示的。\n\n\n\n\n# 转发请标明出处，谢谢！","source":"_posts/How to see React Native support whilc style.md","raw":"title: React Native 如何知道该组件支持哪些样式呢\ndate: 2015-09-25 16:32:05\ncategories:\n- 学习\ntags:\n- Android\n- iOS\n- React Native\n---\n在用React Native开发的时候，有些组件的样式我们会不知道，但是我们怎样才能知道组件支持什么样式呢？\n查看文档是一个好方法，但是查看文档毕竟不够方便，下面我介绍一种比较实用的方法。\n\n## 修改index.ios.js代码\n\n~~~bash\n'use strict';\n\nvar React = require('react-native');\nvar {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View,\n  Image,\n} = React;\n\nvar HelloWorld = React.createClass({\n  render: function() {\n    return (\n      <View>\n          <View style={styles.style_1}>\n\n          </View>\n      </View>\n    );\n  }\n});\n\nvar styles = StyleSheet.create({\n  style_1: {\n    height:40,\n    borderWidth: 1,\n    borderColor: 'red',\n    aaa: 's'\n  },\n});\n\nAppRegistry.registerComponent('HelloWorld', () => HelloWorld);\n\n~~~\n<!--more-->\n\n可以看到在styles里面的样式style_1里，我乱写了一个样式```aaa: 's'```，这时运行工程，就会看到如下的结果\n![](http://120.24.60.216:4000/img/20150925162728.png)\n\n这个时候我们就可以看到当前组件支持的样式了，是不是很简单？但是这个方法必须写到样式的创建中去，而不能写为内联样式。写成内联样式，你是看不到报错提示的。\n\n\n\n\n# 转发请标明出处，谢谢！","slug":"How to see React Native support whilc style","published":1,"updated":"2015-09-25T08:32:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigkgex90000vb0vhs2ntf9zh"},{"title":"在Xcode7/7.1中使用Http请求","date":"2015-12-22T09:23:22.000Z","_content":"\n## 背景\niOS9引入了新特性App Transport Security (ATS)。\n新特性要求App内访问的网络必须使用HTTPS协议。\n但是现在很多项目使用的是HTTP协议，现在也不能马上改成HTTPS协议传输\n\n<!--more-->\n\n## Xcode7\n在Info.plist中add Row添加NSAppTransportSecurity类型Dictionary。\n在NSAppTransportSecurity下添加NSAllowsArbitraryLoads类型Boolean,值设为YES\n\n## Xcode7.1\n在Xcode7.1中苹果更改了这项设定的名称\n在App Transport Security Settings下添加Allows Arbitrary Loads类型Boolean,值设为YES\n\n\n# 转发请标明出处，谢谢！","source":"_posts/7.1中使用Http请求.md","raw":"title: 在Xcode7/7.1中使用Http请求\ndate: 2015-12-22 17:23:22\ncategories:\n- 学习\ntags:\n- Xcode iOS\n---\n\n## 背景\niOS9引入了新特性App Transport Security (ATS)。\n新特性要求App内访问的网络必须使用HTTPS协议。\n但是现在很多项目使用的是HTTP协议，现在也不能马上改成HTTPS协议传输\n\n<!--more-->\n\n## Xcode7\n在Info.plist中add Row添加NSAppTransportSecurity类型Dictionary。\n在NSAppTransportSecurity下添加NSAllowsArbitraryLoads类型Boolean,值设为YES\n\n## Xcode7.1\n在Xcode7.1中苹果更改了这项设定的名称\n在App Transport Security Settings下添加Allows Arbitrary Loads类型Boolean,值设为YES\n\n\n# 转发请标明出处，谢谢！","slug":"7.1中使用Http请求","published":1,"updated":"2015-12-22T09:32:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilm0vzxa00006qvhn1zop9m7"},{"title":"用命令行在iOS应用中集成Alamofire（网络请求框架）","date":"2015-12-23T03:43:35.000Z","_content":"\n## 背景\niOS项目一般都要联网的，所以本教程是Swift工程集成Alamofire进行网络请求。\n\n<!--more-->\n\n## 安装 Cocoapods\n在终端理直接输入下面的命令\n~~~bash\ngem install cocoapods\n~~~\n\n## 创建Podfile文件\n\n在工程的目录下面创建Podfile文件\n~~~bash\nvi Podfile\n~~~\n在Podfile文件里面输入\n~~~bash\nsource 'https://github.com/CocoaPods/Specs.git'\n \nplatform :ios, '8.0'\n \nuse_frameworks!\n \npod 'Alamofire', '~> 3.0'\n~~~\n保存退出Podfile，执行\n~~~bash\npod install\n~~~\n当终端输出类似下面的内容的时候就成功了。\n![](http://120.24.60.216:4000/img/20151223115020.png)\n## 关闭当前的所以Xcode\n关闭当前打开项目的Xcode，之后点击工程的XXXX.xcworkspace打开工程\n## Alamofire的使用\n\n下面的是Alamofire的GET和POST的使用方法\n\n* GET方式\n~~~bash\nAlamofire.request(.GET, \"urlStr\") .responseJSON { response in // 1\n      print(response.request)  // original URL request\n      print(response.response) // URL response\n      print(response.data)     // server data\n      print(response.result)   // result of response serialization\n\n      if let JSON = response.result.value {\n         print(\"JSON: \\(JSON)\")\n      }\n}\n~~~\n* POST方式\n~~~bash\n\tlet parameters = [\n            \"parameter1\": \"aaa\",\n            \"parameter2\":  1\n        ]\n\n\n        Alamofire.request(.POST, \"urlStr\", parameters:parameters ).responseJSON {response in\n\n//          debugPrint(response)\n            switch response.result {\n            case .Success:\n                //把得到的JSON数据转为字典\n                if let j = response.result.value as? NSDictionary{\n                    //获取字典里面的key为数组\n                    let Items = j.valueForKey(\"result\")as! NSArray\n                    //便利数组得到每一个字典模型\n                    for dict in Items{\n\n                        print(dict)\n                    }\n\n                }\n            case .Failure(let error):\n\n                print(error)\n            }\n\n\n        }\n~~~\n\nover！！！\n\n\n\n# 转发请标明出处，谢谢！","source":"_posts/用命令行在iOS应用中集成Alamofire.md","raw":"title: 用命令行在iOS应用中集成Alamofire（网络请求框架）\ndate: 2015-12-23 11:43:35\ncategories:\n- 学习\ntags:\n- Xcode iOS Alamofire\n---\n\n## 背景\niOS项目一般都要联网的，所以本教程是Swift工程集成Alamofire进行网络请求。\n\n<!--more-->\n\n## 安装 Cocoapods\n在终端理直接输入下面的命令\n~~~bash\ngem install cocoapods\n~~~\n\n## 创建Podfile文件\n\n在工程的目录下面创建Podfile文件\n~~~bash\nvi Podfile\n~~~\n在Podfile文件里面输入\n~~~bash\nsource 'https://github.com/CocoaPods/Specs.git'\n \nplatform :ios, '8.0'\n \nuse_frameworks!\n \npod 'Alamofire', '~> 3.0'\n~~~\n保存退出Podfile，执行\n~~~bash\npod install\n~~~\n当终端输出类似下面的内容的时候就成功了。\n![](http://120.24.60.216:4000/img/20151223115020.png)\n## 关闭当前的所以Xcode\n关闭当前打开项目的Xcode，之后点击工程的XXXX.xcworkspace打开工程\n## Alamofire的使用\n\n下面的是Alamofire的GET和POST的使用方法\n\n* GET方式\n~~~bash\nAlamofire.request(.GET, \"urlStr\") .responseJSON { response in // 1\n      print(response.request)  // original URL request\n      print(response.response) // URL response\n      print(response.data)     // server data\n      print(response.result)   // result of response serialization\n\n      if let JSON = response.result.value {\n         print(\"JSON: \\(JSON)\")\n      }\n}\n~~~\n* POST方式\n~~~bash\n\tlet parameters = [\n            \"parameter1\": \"aaa\",\n            \"parameter2\":  1\n        ]\n\n\n        Alamofire.request(.POST, \"urlStr\", parameters:parameters ).responseJSON {response in\n\n//          debugPrint(response)\n            switch response.result {\n            case .Success:\n                //把得到的JSON数据转为字典\n                if let j = response.result.value as? NSDictionary{\n                    //获取字典里面的key为数组\n                    let Items = j.valueForKey(\"result\")as! NSArray\n                    //便利数组得到每一个字典模型\n                    for dict in Items{\n\n                        print(dict)\n                    }\n\n                }\n            case .Failure(let error):\n\n                print(error)\n            }\n\n\n        }\n~~~\n\nover！！！\n\n\n\n# 转发请标明出处，谢谢！","slug":"用命令行在iOS应用中集成Alamofire","published":1,"updated":"2015-12-23T04:56:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilm0vzy500046qvh7uo5e802"},{"title":"linux下使用ffmpeg将amr转成mp3","date":"2016-02-25T06:59:20.000Z","_content":"\n## 背景\n项目有需求把amr格式的音频转换成mp3格式在浏览器播放，所以我们打算使用ffmpeg实现这部分的功能。\n\n<!--more-->\n\n## yasm：汇编器，新版本的ffmpeg增加了汇编代码\n\n~~~bash\nwget http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz\ntar -xzvf yasm-1.3.0.tar.gz\ncd yasm-1.3.0\n./configure\nmake\nmake install\n~~~\n\n## lame：Mp3音频解码\n~~~bash\nwget http://jaist.dl.sourceforge.net/project/lame/lame/3.99/lame-3.99.5.tar.gz\ntar -xzvf lame-3.99.5.tar.gz\ncd lame-3.99.5\n./configure\nmake\nmake install\n~~~\n\n## amr支持\n~~~bash\nwget http://downloads.sourceforge.net/project/opencore-amr/opencore-amr/opencore-amr-0.1.3.tar.gz\ntar -xzvf opencore-amr-0.1.3.tar.gz\ncd opencore-amr-0.1.3\n./configure\nmake\nmake install\n~~~\n\n## amrnb支持\n~~~bash\nwget http://www.penguin.cz/~utx/ftp/amr/amrnb-11.0.0.0.tar.bz2\ntar -xjvf amrnb-11.0.0.0.tar.bz2\ncd amrnb-11.0.0.0\n./configure\nmake\nmake install\n~~~\n\n## amrwb支持\n~~~bash\nwget http://www.penguin.cz/~utx/ftp/amr/amrwb-11.0.0.0.tar.bz2\ntar -xjvf amrwb-11.0.0.0.tar.bz2\ncd amrwb-11.0.0.0\n./configure\nmake\nmake install\n~~~\n\n## ffmpeg\n~~~bash\nwget http://ffmpeg.org/releases/ffmpeg-2.5.3.tar.bz2\ntar -xjvf ffmpeg-2.5.3.tar.bz2\ncd ffmpeg-2.5.3\n./configure --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-version3 --enable-shared\nmake\nmake install\n~~~\n\n[资源下载](http://120.24.60.216:4000/resources/ffmpeg安装文件和教程.tar.gz \"资源下载\")\n\n# 转发自http://my.oschina.net/ethan09/blog/372435?fromerr=OjFebdNT","source":"_posts/linux下使用ffmpeg将amr转成mp3.md","raw":"title: linux下使用ffmpeg将amr转成mp3\ndate: 2016-02-25 14:59:20\ncategories:\n- 学习\ntags:\n- linux ffmpeg\n---\n\n## 背景\n项目有需求把amr格式的音频转换成mp3格式在浏览器播放，所以我们打算使用ffmpeg实现这部分的功能。\n\n<!--more-->\n\n## yasm：汇编器，新版本的ffmpeg增加了汇编代码\n\n~~~bash\nwget http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz\ntar -xzvf yasm-1.3.0.tar.gz\ncd yasm-1.3.0\n./configure\nmake\nmake install\n~~~\n\n## lame：Mp3音频解码\n~~~bash\nwget http://jaist.dl.sourceforge.net/project/lame/lame/3.99/lame-3.99.5.tar.gz\ntar -xzvf lame-3.99.5.tar.gz\ncd lame-3.99.5\n./configure\nmake\nmake install\n~~~\n\n## amr支持\n~~~bash\nwget http://downloads.sourceforge.net/project/opencore-amr/opencore-amr/opencore-amr-0.1.3.tar.gz\ntar -xzvf opencore-amr-0.1.3.tar.gz\ncd opencore-amr-0.1.3\n./configure\nmake\nmake install\n~~~\n\n## amrnb支持\n~~~bash\nwget http://www.penguin.cz/~utx/ftp/amr/amrnb-11.0.0.0.tar.bz2\ntar -xjvf amrnb-11.0.0.0.tar.bz2\ncd amrnb-11.0.0.0\n./configure\nmake\nmake install\n~~~\n\n## amrwb支持\n~~~bash\nwget http://www.penguin.cz/~utx/ftp/amr/amrwb-11.0.0.0.tar.bz2\ntar -xjvf amrwb-11.0.0.0.tar.bz2\ncd amrwb-11.0.0.0\n./configure\nmake\nmake install\n~~~\n\n## ffmpeg\n~~~bash\nwget http://ffmpeg.org/releases/ffmpeg-2.5.3.tar.bz2\ntar -xjvf ffmpeg-2.5.3.tar.bz2\ncd ffmpeg-2.5.3\n./configure --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-version3 --enable-shared\nmake\nmake install\n~~~\n\n[资源下载](http://120.24.60.216:4000/resources/ffmpeg安装文件和教程.tar.gz \"资源下载\")\n\n# 转发自http://my.oschina.net/ethan09/blog/372435?fromerr=OjFebdNT","slug":"linux下使用ffmpeg将amr转成mp3","published":1,"updated":"2016-02-25T07:30:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilm0vzy900086qvh2y60z7vq"},{"title":"Android Studio 集成百度地图开发","date":"2015-12-15T10:01:15.000Z","_content":"\n简单介绍在Android Studio集成百度sdk开发，废话不多说，直接开始。\n<!--more-->\n\n## 首先去百度的开放平台里面下载需要的sdk，[百度sdk地址](http://developer.baidu.com/map/index.php?title=androidsdk/sdkandev-download \"\")\n![](http://120.24.60.216:4000/img/20151215181123.png)\n建议选择自定义的下载，只下自己需要的包\n![](http://120.24.60.216:4000/img/20151215181539.png)\n## 申请百度key\n申请百度key百度自己有详细的教程，[教程](http://developer.baidu.com/map/index.php?title=androidsdk/guide/key \"\")\n\n## 工程配置\n* AndroidManifest.xml设置\n添加权限\n~~~bash\n\t\t<uses-permission android:name=\"com.android.launcher.permission.READ_SETTINGS\" />\n    <uses-permission android:name=\"android.permission.WAKE_LOCK\" >\n    </uses-permission>\n    <!-- SDK1.5需要android.permission.GET_TASKS权限判断本程序是否为当前运行的应用? -->\n    <uses-permission android:name=\"android.permission.GET_TASKS\" />\n    <uses-permission android:name=\"android.permission.WRITE_SETTINGS\" />\n    <!-- 这个权限用于进行网络定位 -->\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n    <!-- 这个权限用于访问GPS定位 -->\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n    <!-- 用于访问wifi网络信息，wifi信息会用于进行网络定位 -->\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\n    <!-- 获取运营商信息，用于支持提供运营商信息相关的接口 -->\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n    <!-- 这个权限用于获取wifi的获取权限，wifi信息会用来进行网络定位 -->\n    <uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\" />\n    <!-- 用于读取手机当前的状态 -->\n    <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\n    <!-- 写入扩展存储，向扩展卡写入数据，用于写入离线定位数据 -->\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n    <!-- 访问网络，网络定位需要上网 -->\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <!-- SD卡读取权限，用户写入离线定位数据 -->\n    <uses-permission android:name=\"android.permission.MOUNT_UNMOUNT_FILESYSTEMS\" />\n    <!-- 允许应用读取低级别的系统日志文件 -->\n    <uses-permission android:name=\"android.permission.READ_LOGS\" />\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n~~~\n\n* 配置key\n~~~bash\n\t\t\t<meta-data\n            android:name=\"com.baidu.lbsapi.API_KEY\"\n            android:value=\"你的申请的key\" />\n~~~\n\n* 导入相关的jar包\n把下载的jar包放在app/libs目录下面，之后在菜单栏选择File->Project Structor->Modules->Dependencies,点击+号，选择File dependency，选择jar包导入\n![](http://120.24.60.216:4000/img/20151215183745.png)\n\n* 导入so\nsrc/main/目录下新建jniLibs目录，放入所以.so文件\n![](http://120.24.60.216:4000/img/20151215184200.png)\n如果工程报错，具体错误忘记了，不过到这步的错误一般都是下面的问题引起的\n添加armeabi-v7a文件夹，导入相关的so文件\n![](http://120.24.60.216:4000/img/20151215184955.png)\n\n* 建议重写Application，在使用SDK各组件之前初始化context信息\n~~~bash\npublic class MyApplication extends Application{\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        //在使用SDK各组件之前初始化context信息，传入ApplicationContext\n        //注意该方法要再setContentView方法之前实现\n        SDKInitializer.initialize(getApplicationContext());\n    }\n}\n~~~\n\n## MainActivity.java实现\n~~~bash\npublic class MainActivity extends Activity {\n    MapView mMapView = null;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        //获取地图控件引用\n        mMapView = (MapView) findViewById(R.id.bmapView);\n\n        initMap();\n    }\n\n    private void initMap() {\n       BaiduMap mBaiduMap = mMapView.getMap();\n        //普通地图\n        mBaiduMap.setMapType(BaiduMap.MAP_TYPE_NORMAL);\n        //卫星地图\n//        mBaiduMap.setMapType(BaiduMap.MAP_TYPE_SATELLITE);\n        mBaiduMap.setTrafficEnabled(true);\n\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        //在activity执行onDestroy时执行mMapView.onDestroy()，实现地图生命周期管理\n        mMapView.onDestroy();\n    }\n    @Override\n    protected void onResume() {\n        super.onResume();\n        //在activity执行onResume时执行mMapView. onResume ()，实现地图生命周期管理\n        mMapView.onResume();\n    }\n    @Override\n    protected void onPause() {\n        super.onPause();\n        //在activity执行onPause时执行mMapView. onPause ()，实现地图生命周期管理\n        mMapView.onPause();\n    }\n}\n\n\n~~~\n\n## activity_main.xml实现\n~~~bash\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"www.disonchen.com.map.test.MainActivity\">\n\n    <com.baidu.mapapi.map.MapView\n        android:id=\"@+id/bmapView\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        android:clickable=\"true\" />\n\n\n</RelativeLayout>\n~~~\n\n## 如果程序报打开数据库错误，应该是百度地图SDK相关的方法被混淆了，在proguard-rules.pro文件里面添加下面的代码就可以了\n~~~bash\n-keep class com.baidu.** {*;}\n-keep class vi.com.** {*;}    \n-dontwarn com.baidu.**\n~~~\n至此，百度地图可以显示出来了。\n\n\n\n# 转发请标明出处，谢谢！","source":"_posts/Android Studio 集成百度地图开发.md","raw":"title: Android Studio 集成百度地图开发\ndate: 2015-12-15 18:01:15\ncategories:\n- 学习\ntags:\n- Android 百度sdk \n---\n\n简单介绍在Android Studio集成百度sdk开发，废话不多说，直接开始。\n<!--more-->\n\n## 首先去百度的开放平台里面下载需要的sdk，[百度sdk地址](http://developer.baidu.com/map/index.php?title=androidsdk/sdkandev-download \"\")\n![](http://120.24.60.216:4000/img/20151215181123.png)\n建议选择自定义的下载，只下自己需要的包\n![](http://120.24.60.216:4000/img/20151215181539.png)\n## 申请百度key\n申请百度key百度自己有详细的教程，[教程](http://developer.baidu.com/map/index.php?title=androidsdk/guide/key \"\")\n\n## 工程配置\n* AndroidManifest.xml设置\n添加权限\n~~~bash\n\t\t<uses-permission android:name=\"com.android.launcher.permission.READ_SETTINGS\" />\n    <uses-permission android:name=\"android.permission.WAKE_LOCK\" >\n    </uses-permission>\n    <!-- SDK1.5需要android.permission.GET_TASKS权限判断本程序是否为当前运行的应用? -->\n    <uses-permission android:name=\"android.permission.GET_TASKS\" />\n    <uses-permission android:name=\"android.permission.WRITE_SETTINGS\" />\n    <!-- 这个权限用于进行网络定位 -->\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n    <!-- 这个权限用于访问GPS定位 -->\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n    <!-- 用于访问wifi网络信息，wifi信息会用于进行网络定位 -->\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\n    <!-- 获取运营商信息，用于支持提供运营商信息相关的接口 -->\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n    <!-- 这个权限用于获取wifi的获取权限，wifi信息会用来进行网络定位 -->\n    <uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\" />\n    <!-- 用于读取手机当前的状态 -->\n    <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\n    <!-- 写入扩展存储，向扩展卡写入数据，用于写入离线定位数据 -->\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n    <!-- 访问网络，网络定位需要上网 -->\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <!-- SD卡读取权限，用户写入离线定位数据 -->\n    <uses-permission android:name=\"android.permission.MOUNT_UNMOUNT_FILESYSTEMS\" />\n    <!-- 允许应用读取低级别的系统日志文件 -->\n    <uses-permission android:name=\"android.permission.READ_LOGS\" />\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n~~~\n\n* 配置key\n~~~bash\n\t\t\t<meta-data\n            android:name=\"com.baidu.lbsapi.API_KEY\"\n            android:value=\"你的申请的key\" />\n~~~\n\n* 导入相关的jar包\n把下载的jar包放在app/libs目录下面，之后在菜单栏选择File->Project Structor->Modules->Dependencies,点击+号，选择File dependency，选择jar包导入\n![](http://120.24.60.216:4000/img/20151215183745.png)\n\n* 导入so\nsrc/main/目录下新建jniLibs目录，放入所以.so文件\n![](http://120.24.60.216:4000/img/20151215184200.png)\n如果工程报错，具体错误忘记了，不过到这步的错误一般都是下面的问题引起的\n添加armeabi-v7a文件夹，导入相关的so文件\n![](http://120.24.60.216:4000/img/20151215184955.png)\n\n* 建议重写Application，在使用SDK各组件之前初始化context信息\n~~~bash\npublic class MyApplication extends Application{\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        //在使用SDK各组件之前初始化context信息，传入ApplicationContext\n        //注意该方法要再setContentView方法之前实现\n        SDKInitializer.initialize(getApplicationContext());\n    }\n}\n~~~\n\n## MainActivity.java实现\n~~~bash\npublic class MainActivity extends Activity {\n    MapView mMapView = null;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        //获取地图控件引用\n        mMapView = (MapView) findViewById(R.id.bmapView);\n\n        initMap();\n    }\n\n    private void initMap() {\n       BaiduMap mBaiduMap = mMapView.getMap();\n        //普通地图\n        mBaiduMap.setMapType(BaiduMap.MAP_TYPE_NORMAL);\n        //卫星地图\n//        mBaiduMap.setMapType(BaiduMap.MAP_TYPE_SATELLITE);\n        mBaiduMap.setTrafficEnabled(true);\n\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        //在activity执行onDestroy时执行mMapView.onDestroy()，实现地图生命周期管理\n        mMapView.onDestroy();\n    }\n    @Override\n    protected void onResume() {\n        super.onResume();\n        //在activity执行onResume时执行mMapView. onResume ()，实现地图生命周期管理\n        mMapView.onResume();\n    }\n    @Override\n    protected void onPause() {\n        super.onPause();\n        //在activity执行onPause时执行mMapView. onPause ()，实现地图生命周期管理\n        mMapView.onPause();\n    }\n}\n\n\n~~~\n\n## activity_main.xml实现\n~~~bash\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"www.disonchen.com.map.test.MainActivity\">\n\n    <com.baidu.mapapi.map.MapView\n        android:id=\"@+id/bmapView\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        android:clickable=\"true\" />\n\n\n</RelativeLayout>\n~~~\n\n## 如果程序报打开数据库错误，应该是百度地图SDK相关的方法被混淆了，在proguard-rules.pro文件里面添加下面的代码就可以了\n~~~bash\n-keep class com.baidu.** {*;}\n-keep class vi.com.** {*;}    \n-dontwarn com.baidu.**\n~~~\n至此，百度地图可以显示出来了。\n\n\n\n# 转发请标明出处，谢谢！","slug":"Android Studio 集成百度地图开发","published":1,"updated":"2015-12-16T01:50:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilm0vzyd000c6qvhhxix44q8"},{"title":"Android Studio 实现百度地图地位","date":"2015-12-16T05:46:10.000Z","_content":"\n百度就是坑，明明都引入地图的sdk了，但是要使用定位的功能还是需要另外引入定位的sdk，下面是我自己整理的教程，百度也有自己的教程，[百度定位教程](http://developer.baidu.com/map/index.php?title=android-locsdk/guide/v5-0 \"\")。\n<!--more-->\n\n## 首先去百度的开放平台里面下载定位的sdk，[百度定位sdk地址](http://developer.baidu.com/map/index.php?title=android-locsdk/geosdk-android-download \"\")\n下载完sdk就集成到项目里面，这个和全部的教程差不多，不再描述。\n## 申请百度key\n同理，也是要申请百度key的，如果已经申请过就不用再申请，key是公用的，只要包名不变！申请百度key百度自己有详细的教程，[教程](http://developer.baidu.com/map/index.php?title=androidsdk/guide/key \"\")\n\n## build.gradle中配置SO的使用\n~~~bash\n\t\tsourceSets {\n        main {\n            jniLibs.srcDirs = ['libs']\n        }\n    }\n~~~\n\n## 注意事项，下面是百度的原话\n开发者如果开发的是系统应用，则只在工程中配置SO还是不够的，还需要手动把对应架构的SO拷贝到/system/lib下，如果是64位系统的话需要将64位的SO拷贝到/sytem/lib64下。\n\n注意：每次新版本的定位SDK，开发者除了要更新JAR包之外，也要注意一下SO有无更新，如果SO名称不一样了，也要及时替换老的SO版本，不然会导致定位失败！ \n\n* 当然相关的权限也是要申请的，但是如果操作过上一篇文就不用重复申请了，上一篇我是全部申请的。\n\n## 设置AndroidManifest.xml\n百度原文，在application标签中声明service组件,每个app拥有自己单独的定位service\n~~~bash\n<service\n            android:name=\"com.baidu.location.f\"\n            android:enabled=\"true\"\n            android:process=\":remote\" >\n        </service>\n~~~\n好，环境已经配置好，下面是代码的实现\n\n## MainActivity.java实现\n~~~bash\npublic class MainActivity extends Activity {\n    private MapView mMapView = null;\n\n    // 定位相关\n    private LocationClient mLocClient;\n    private MyLocationListenner myListener = new MyLocationListenner();\n    private MyLocationConfiguration.LocationMode mCurrentMode;\n    private BitmapDescriptor mCurrentMarker;\n    private BaiduMap mBaiduMap;\n    private boolean isFirstLoc = true; // 是否首次定位\n\n    // UI相关\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        //获取地图控件引用\n        mMapView = (MapView) findViewById(R.id.bmapView);\n\n        mCurrentMode = MyLocationConfiguration.LocationMode.NORMAL;\n\n        initMap();\n    }\n\n    private void initMap() {\n        // 地图初始化\n        mBaiduMap = mMapView.getMap();\n        // 开启定位图层\n        mBaiduMap.setMyLocationEnabled(true);\n        // 定位初始化\n        mLocClient = new LocationClient(this);\n        mLocClient.registerLocationListener(myListener);\n        LocationClientOption option = new LocationClientOption();\n        option.setOpenGps(true); // 打开gps\n        option.setCoorType(\"bd09ll\"); // 设置坐标类型\n        option.setScanSpan(1000);\n        mLocClient.setLocOption(option);\n        mLocClient.start();\n    }\n\n    /**\n     * 定位SDK监听函数\n     */\n    public class MyLocationListenner implements BDLocationListener {\n\n        @Override\n        public void onReceiveLocation(BDLocation location) {\n            // map view 销毁后不在处理新接收的位置\n            if (location == null || mMapView == null) {\n                return;\n            }\n            MyLocationData locData = new MyLocationData.Builder()\n                    .accuracy(location.getRadius())\n                            // 此处设置开发者获取到的方向信息，顺时针0-360\n                    .direction(100).latitude(location.getLatitude())\n                    .longitude(location.getLongitude()).build();\n            mBaiduMap.setMyLocationData(locData);\n            if (isFirstLoc) {\n                isFirstLoc = false;\n                LatLng ll = new LatLng(location.getLatitude(),\n                        location.getLongitude());\n                MapStatusUpdate u = MapStatusUpdateFactory.newLatLng(ll);\n                mBaiduMap.animateMapStatus(u);\n            }\n        }\n\n        public void onReceivePoi(BDLocation poiLocation) {\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        // 退出时销毁定位\n        mLocClient.stop();\n        // 关闭定位图层\n        mBaiduMap.setMyLocationEnabled(false);\n        mMapView.onDestroy();\n        mMapView = null;\n        super.onDestroy();\n    }\n    @Override\n    protected void onResume() {\n        //在activity执行onResume时执行mMapView. onResume ()，实现地图生命周期管理\n        mMapView.onResume();\n        super.onResume();\n    }\n    @Override\n    protected void onPause() {\n        //在activity执行onPause时执行mMapView. onPause ()，实现地图生命周期管理\n        mMapView.onPause();\n        super.onPause();\n    }\n}\n\n\n~~~\n\n## activity_main.xml不用修改，用上一个的代码\n~~~bash\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"www.disonchen.com.map.test.MainActivity\">\n\n    <com.baidu.mapapi.map.MapView\n        android:id=\"@+id/bmapView\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        android:clickable=\"true\" />\n\n\n</RelativeLayout>\n~~~\n\n\n好，运行应用，定位终于实现了！！！！\n\n[项目地址](https://github.com/chendisun/BaiDuMapDemo \"\")\n\n\n\n\n# 转发请标明出处，谢谢！","source":"_posts/Android Studio 实现百度地图地位.md","raw":"title: Android Studio 实现百度地图地位\ndate: 2015-12-16 13:46:10\ncategories:\n- 学习\ntags:\n- Android 百度sdk \n---\n\n百度就是坑，明明都引入地图的sdk了，但是要使用定位的功能还是需要另外引入定位的sdk，下面是我自己整理的教程，百度也有自己的教程，[百度定位教程](http://developer.baidu.com/map/index.php?title=android-locsdk/guide/v5-0 \"\")。\n<!--more-->\n\n## 首先去百度的开放平台里面下载定位的sdk，[百度定位sdk地址](http://developer.baidu.com/map/index.php?title=android-locsdk/geosdk-android-download \"\")\n下载完sdk就集成到项目里面，这个和全部的教程差不多，不再描述。\n## 申请百度key\n同理，也是要申请百度key的，如果已经申请过就不用再申请，key是公用的，只要包名不变！申请百度key百度自己有详细的教程，[教程](http://developer.baidu.com/map/index.php?title=androidsdk/guide/key \"\")\n\n## build.gradle中配置SO的使用\n~~~bash\n\t\tsourceSets {\n        main {\n            jniLibs.srcDirs = ['libs']\n        }\n    }\n~~~\n\n## 注意事项，下面是百度的原话\n开发者如果开发的是系统应用，则只在工程中配置SO还是不够的，还需要手动把对应架构的SO拷贝到/system/lib下，如果是64位系统的话需要将64位的SO拷贝到/sytem/lib64下。\n\n注意：每次新版本的定位SDK，开发者除了要更新JAR包之外，也要注意一下SO有无更新，如果SO名称不一样了，也要及时替换老的SO版本，不然会导致定位失败！ \n\n* 当然相关的权限也是要申请的，但是如果操作过上一篇文就不用重复申请了，上一篇我是全部申请的。\n\n## 设置AndroidManifest.xml\n百度原文，在application标签中声明service组件,每个app拥有自己单独的定位service\n~~~bash\n<service\n            android:name=\"com.baidu.location.f\"\n            android:enabled=\"true\"\n            android:process=\":remote\" >\n        </service>\n~~~\n好，环境已经配置好，下面是代码的实现\n\n## MainActivity.java实现\n~~~bash\npublic class MainActivity extends Activity {\n    private MapView mMapView = null;\n\n    // 定位相关\n    private LocationClient mLocClient;\n    private MyLocationListenner myListener = new MyLocationListenner();\n    private MyLocationConfiguration.LocationMode mCurrentMode;\n    private BitmapDescriptor mCurrentMarker;\n    private BaiduMap mBaiduMap;\n    private boolean isFirstLoc = true; // 是否首次定位\n\n    // UI相关\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        //获取地图控件引用\n        mMapView = (MapView) findViewById(R.id.bmapView);\n\n        mCurrentMode = MyLocationConfiguration.LocationMode.NORMAL;\n\n        initMap();\n    }\n\n    private void initMap() {\n        // 地图初始化\n        mBaiduMap = mMapView.getMap();\n        // 开启定位图层\n        mBaiduMap.setMyLocationEnabled(true);\n        // 定位初始化\n        mLocClient = new LocationClient(this);\n        mLocClient.registerLocationListener(myListener);\n        LocationClientOption option = new LocationClientOption();\n        option.setOpenGps(true); // 打开gps\n        option.setCoorType(\"bd09ll\"); // 设置坐标类型\n        option.setScanSpan(1000);\n        mLocClient.setLocOption(option);\n        mLocClient.start();\n    }\n\n    /**\n     * 定位SDK监听函数\n     */\n    public class MyLocationListenner implements BDLocationListener {\n\n        @Override\n        public void onReceiveLocation(BDLocation location) {\n            // map view 销毁后不在处理新接收的位置\n            if (location == null || mMapView == null) {\n                return;\n            }\n            MyLocationData locData = new MyLocationData.Builder()\n                    .accuracy(location.getRadius())\n                            // 此处设置开发者获取到的方向信息，顺时针0-360\n                    .direction(100).latitude(location.getLatitude())\n                    .longitude(location.getLongitude()).build();\n            mBaiduMap.setMyLocationData(locData);\n            if (isFirstLoc) {\n                isFirstLoc = false;\n                LatLng ll = new LatLng(location.getLatitude(),\n                        location.getLongitude());\n                MapStatusUpdate u = MapStatusUpdateFactory.newLatLng(ll);\n                mBaiduMap.animateMapStatus(u);\n            }\n        }\n\n        public void onReceivePoi(BDLocation poiLocation) {\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        // 退出时销毁定位\n        mLocClient.stop();\n        // 关闭定位图层\n        mBaiduMap.setMyLocationEnabled(false);\n        mMapView.onDestroy();\n        mMapView = null;\n        super.onDestroy();\n    }\n    @Override\n    protected void onResume() {\n        //在activity执行onResume时执行mMapView. onResume ()，实现地图生命周期管理\n        mMapView.onResume();\n        super.onResume();\n    }\n    @Override\n    protected void onPause() {\n        //在activity执行onPause时执行mMapView. onPause ()，实现地图生命周期管理\n        mMapView.onPause();\n        super.onPause();\n    }\n}\n\n\n~~~\n\n## activity_main.xml不用修改，用上一个的代码\n~~~bash\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"www.disonchen.com.map.test.MainActivity\">\n\n    <com.baidu.mapapi.map.MapView\n        android:id=\"@+id/bmapView\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        android:clickable=\"true\" />\n\n\n</RelativeLayout>\n~~~\n\n\n好，运行应用，定位终于实现了！！！！\n\n[项目地址](https://github.com/chendisun/BaiDuMapDemo \"\")\n\n\n\n\n# 转发请标明出处，谢谢！","slug":"Android Studio 实现百度地图地位","published":1,"updated":"2015-12-16T07:01:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilm0vzyg000g6qvhqqg7wipu"},{"title":"Android反编译","date":"2016-03-11T06:20:13.000Z","_content":"\n## 背景\n有时做一些研究性的工作，需要反编译Android的app学习别人的代码，所以下面记录一个我学习到的反编译教程。\n\n<!--more-->\n下文所有的工具都可以在我提供的工具包里面找到，[工具下载](http://120.24.60.216:4000/resources/安卓反编译工具.zip \"下载工具\")\n\n\n## 使用apktool工具对安卓应用就行资源的反编译\n\napktool工具可以对APK进行反编译生成程序的源代码和图片、XML配置、语言资源等文件\n\n~~~bash\njava -jar apktool_2.0.3.jar d -f xxx.apk <反编译后的路径，可以不指定（默认当前目录）>\n~~~\n\n## 解压dex2jar-2.0.zip包，使用dex2jar把apk转换成jar包\n\n~~~bash\n# tar -zxvf dex2jar-2.0.zip\n# cd dex2jar-2.0\n# sh d2j-dex2jar.sh xxx.apk\n~~~\n\n执行完以上命令会在dex2jar-2.0目录下发现多了一个xxx-dex2jar.jar的文件\n\n## 使用JD-GUI工具打开生成的jar文件，就可以到反编译后的代码\n\nJD-GUI工具还可以把代码保存下来，之后把第一步反编译得到的资源文件和代码全部导入到一个新的安卓工程里面，这样就可以整合成一个安卓工程了。\n到这里你想干嘛就可以干嘛了啦！！！\n\n\n\n\n# 参考自百度资料，转发表明出现，谢谢！","source":"_posts/Android反编译.md","raw":"title: Android反编译\ndate: 2016-03-11 14:20:13\ncategories:\n- 学习\ntags:\n- Android\n---\n\n## 背景\n有时做一些研究性的工作，需要反编译Android的app学习别人的代码，所以下面记录一个我学习到的反编译教程。\n\n<!--more-->\n下文所有的工具都可以在我提供的工具包里面找到，[工具下载](http://120.24.60.216:4000/resources/安卓反编译工具.zip \"下载工具\")\n\n\n## 使用apktool工具对安卓应用就行资源的反编译\n\napktool工具可以对APK进行反编译生成程序的源代码和图片、XML配置、语言资源等文件\n\n~~~bash\njava -jar apktool_2.0.3.jar d -f xxx.apk <反编译后的路径，可以不指定（默认当前目录）>\n~~~\n\n## 解压dex2jar-2.0.zip包，使用dex2jar把apk转换成jar包\n\n~~~bash\n# tar -zxvf dex2jar-2.0.zip\n# cd dex2jar-2.0\n# sh d2j-dex2jar.sh xxx.apk\n~~~\n\n执行完以上命令会在dex2jar-2.0目录下发现多了一个xxx-dex2jar.jar的文件\n\n## 使用JD-GUI工具打开生成的jar文件，就可以到反编译后的代码\n\nJD-GUI工具还可以把代码保存下来，之后把第一步反编译得到的资源文件和代码全部导入到一个新的安卓工程里面，这样就可以整合成一个安卓工程了。\n到这里你想干嘛就可以干嘛了啦！！！\n\n\n\n\n# 参考自百度资料，转发表明出现，谢谢！","slug":"Android反编译","published":1,"updated":"2016-03-14T08:12:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio2bi9f5000092vh3zpa92cr"},{"title":"百度语言在线集成到iOS应用中","date":"2016-03-11T03:04:02.000Z","_content":"\n## 背景\n因领导需要在iOS应用上面集成语言集成播放，所以安排我着手做着方面的集成研究。下面我就把集成的过程记录下来，做不时之需。\n\n<!--more-->\n\n## 下载百度的语言在线合成sdk\n百度语言集成sdk下载的地址，[sdk地址界面](http://yuyin.baidu.com/tts/download \"sdk下载\")\n\n请下载图示的sdk\n\n![](http://120.24.60.216:4000/img/20160311111224.png)\n\n## 把解压后的必须文件复制到工程下\n复制工程后，在Xcode里面把文件add到工程，做完这步我这里是如下的样子\n![](http://120.24.60.216:4000/img/20160311112427.png)\n\n## 引入编译需要的 Framework\n在Xcode工程中引入 AVFoundation.framework 、SystemConfiguration.framework 、 MobileCoreServices.framework 、 CoreGraphics.framework 、Security.framework\n![](http://120.24.60.216:4000/img/20160311112943.png)\n\n## 把Library Search Paths指定到*.a所在的路径\n如图所示\n![](http://120.24.60.216:4000/img/20160311113128.png)\n\n## 因为百度语言目前只支持iOS4到iOS7，为了避免出现不必要的错误，可以把工程的开发目标改为iOS6\n如图\n![](http://120.24.60.216:4000/img/20160311113510.png)\n\n## 支持http协议\n可以参考我的以前文章，[支持http协议地址](http://blog.disonchen.com/2015/12/22/7.1%E4%B8%AD%E4%BD%BF%E7%94%A8Http%E8%AF%B7%E6%B1%82/#more \"支持http协议地址\")\n\n## 修改写百度语言代码的类的type\n百度原话是\n> 注意：静态库中采用 Objective C++实现，因此需要保证工程中引用静态库头文件实现文件的扩展名必须为.mm。\n\n\n我这里是下面的\n![](http://120.24.60.216:4000/img/20160311114405.png)\n\n## 以下就是代码的实现了\n\n* 首先在实现类的头文件里加入如下的代码\n![](http://120.24.60.216:4000/img/20160311140015.png)\n* 实现类的修改\n![](http://120.24.60.216:4000/img/20160311140235.png)\n\n好了，百度语言集成成功了！\n\n\n# 参考自百度官方教程","source":"_posts/iOS集成百度在线语言合成.md","raw":"title: 百度语言在线集成到iOS应用中\ndate: 2016-03-11 11:04:02\ncategories:\n- 学习\ntags:\n- iOS 百度语言在线合成\n---\n\n## 背景\n因领导需要在iOS应用上面集成语言集成播放，所以安排我着手做着方面的集成研究。下面我就把集成的过程记录下来，做不时之需。\n\n<!--more-->\n\n## 下载百度的语言在线合成sdk\n百度语言集成sdk下载的地址，[sdk地址界面](http://yuyin.baidu.com/tts/download \"sdk下载\")\n\n请下载图示的sdk\n\n![](http://120.24.60.216:4000/img/20160311111224.png)\n\n## 把解压后的必须文件复制到工程下\n复制工程后，在Xcode里面把文件add到工程，做完这步我这里是如下的样子\n![](http://120.24.60.216:4000/img/20160311112427.png)\n\n## 引入编译需要的 Framework\n在Xcode工程中引入 AVFoundation.framework 、SystemConfiguration.framework 、 MobileCoreServices.framework 、 CoreGraphics.framework 、Security.framework\n![](http://120.24.60.216:4000/img/20160311112943.png)\n\n## 把Library Search Paths指定到*.a所在的路径\n如图所示\n![](http://120.24.60.216:4000/img/20160311113128.png)\n\n## 因为百度语言目前只支持iOS4到iOS7，为了避免出现不必要的错误，可以把工程的开发目标改为iOS6\n如图\n![](http://120.24.60.216:4000/img/20160311113510.png)\n\n## 支持http协议\n可以参考我的以前文章，[支持http协议地址](http://blog.disonchen.com/2015/12/22/7.1%E4%B8%AD%E4%BD%BF%E7%94%A8Http%E8%AF%B7%E6%B1%82/#more \"支持http协议地址\")\n\n## 修改写百度语言代码的类的type\n百度原话是\n> 注意：静态库中采用 Objective C++实现，因此需要保证工程中引用静态库头文件实现文件的扩展名必须为.mm。\n\n\n我这里是下面的\n![](http://120.24.60.216:4000/img/20160311114405.png)\n\n## 以下就是代码的实现了\n\n* 首先在实现类的头文件里加入如下的代码\n![](http://120.24.60.216:4000/img/20160311140015.png)\n* 实现类的修改\n![](http://120.24.60.216:4000/img/20160311140235.png)\n\n好了，百度语言集成成功了！\n\n\n# 参考自百度官方教程","slug":"iOS集成百度在线语言合成","published":1,"updated":"2016-03-11T06:11:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio2bi9g4000392vhvnb1jvyy"},{"title":"CentOS更改yum源与更新系统","date":"2016-06-07T11:31:13.000Z","_content":"\n## 首先备份/etc/yum.repos.d/CentOS-Base.repo\n```bash\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n```\n\n<!--more-->\n\n## 进入yum源配置文件所在文件夹\n```bash\n[root@localhost yum.repos.d]# cd /etc/yum.repos.d/\n```\n## 下载163的yum源配置文件，放入/etc/yum.repos.d/(操作前请做好相应备份)\n```bash\n[root@localhost yum.repos.d]# wget http://mirrors.163.com/.help/CentOS6-Base-163.repo\n```\n## 运行yum makecache生成缓存\n```bash\n[root@localhost yum.repos.d]# yum makecache\n```\n## 更新系统\n```bash\n[root@localhost yum.repos.d]# yum -y update\n```\n## 安装vim编辑器\n```bash\n[root@localhost ~]# yum -y install vim*\n```\n\n\n\n\n\n\n\n\n\n\n# 转发自[http://www.cnblogs.com/lightnear/archive/2012/10/03/2710952.html](http://www.cnblogs.com/lightnear/archive/2012/10/03/2710952.html)，谢谢！","source":"_posts/CentOS更改yum源与更新系统.md","raw":"title: CentOS更改yum源与更新系统\ndate: 2016-06-07 19:31:13\ncategories:\n- 学习\ntags:\n- Java\n---\n\n## 首先备份/etc/yum.repos.d/CentOS-Base.repo\n```bash\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n```\n\n<!--more-->\n\n## 进入yum源配置文件所在文件夹\n```bash\n[root@localhost yum.repos.d]# cd /etc/yum.repos.d/\n```\n## 下载163的yum源配置文件，放入/etc/yum.repos.d/(操作前请做好相应备份)\n```bash\n[root@localhost yum.repos.d]# wget http://mirrors.163.com/.help/CentOS6-Base-163.repo\n```\n## 运行yum makecache生成缓存\n```bash\n[root@localhost yum.repos.d]# yum makecache\n```\n## 更新系统\n```bash\n[root@localhost yum.repos.d]# yum -y update\n```\n## 安装vim编辑器\n```bash\n[root@localhost ~]# yum -y install vim*\n```\n\n\n\n\n\n\n\n\n\n\n# 转发自[http://www.cnblogs.com/lightnear/archive/2012/10/03/2710952.html](http://www.cnblogs.com/lightnear/archive/2012/10/03/2710952.html)，谢谢！","slug":"CentOS更改yum源与更新系统","published":1,"updated":"2016-06-07T11:39:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciprqbagl00004pvhzqglr757"},{"title":"mac设置全局命令","date":"2016-06-12T06:51:13.000Z","_content":"\n在使用mac的时候，总有一些程序或者命令希望设为全局的，这里我用xx-net为例，详细记录配置的过程。\n\n<!--more-->\n\n## 先创建xx-net.sh文件，以我本地的为准，我是放在这个路径下的`/Users/dison/fastssh`\n\n```bash\ncd /Users/dison/fastssh\nvi xx-net.sh\n```\n\n## 在xx-net文件里面写入\n\n```bash \n#!/bin/bash\n\nexport XX_NET_HOME=\"/Users/dison/XX-Net\"\n\n#sh /Users/dison/XX-Net/start\n\nsh $XX_NET_HOME/start\n```\n\n## 赋写的权限给`xx-net.sh文件`\n```bash\nchmod -x xx-net.sh\n```\n\n## 设置这个路径`/Users/dison/fastssh`为环境变量，修改本地的`.bash_profile`文件\n```bash\nexport FASTSSH_HOME=/Users/dison/fastssh\nexport PATH=${PATH}:${FASTSSH_HOME}\n```\n\n## source一下`.bash_profile`\n```bash\nsource .bash_profile \n```\n之后就可以在终端里面任何的路径都可以直接运行xx-net.sh了。\n\n\n# 转发标明出处，谢谢！！！","source":"_posts/mac设置全局命令.md","raw":"title: mac设置全局命令\ndate: 2016-06-12 14:51:13\ncategories:\n- 学习\ntags:\n- 学习\n---\n\n在使用mac的时候，总有一些程序或者命令希望设为全局的，这里我用xx-net为例，详细记录配置的过程。\n\n<!--more-->\n\n## 先创建xx-net.sh文件，以我本地的为准，我是放在这个路径下的`/Users/dison/fastssh`\n\n```bash\ncd /Users/dison/fastssh\nvi xx-net.sh\n```\n\n## 在xx-net文件里面写入\n\n```bash \n#!/bin/bash\n\nexport XX_NET_HOME=\"/Users/dison/XX-Net\"\n\n#sh /Users/dison/XX-Net/start\n\nsh $XX_NET_HOME/start\n```\n\n## 赋写的权限给`xx-net.sh文件`\n```bash\nchmod -x xx-net.sh\n```\n\n## 设置这个路径`/Users/dison/fastssh`为环境变量，修改本地的`.bash_profile`文件\n```bash\nexport FASTSSH_HOME=/Users/dison/fastssh\nexport PATH=${PATH}:${FASTSSH_HOME}\n```\n\n## source一下`.bash_profile`\n```bash\nsource .bash_profile \n```\n之后就可以在终端里面任何的路径都可以直接运行xx-net.sh了。\n\n\n# 转发标明出处，谢谢！！！","slug":"mac设置全局命令","published":1,"updated":"2016-06-12T07:22:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciprqbahy00044pvhtsk93m2g"},{"title":"Idea设置eclipse快捷键","date":"2016-06-03T08:31:13.000Z","_content":"\nIdea 设置eclipse的快捷键后会有一些冲突，现在修改一些平时经常使用的快捷键，基本不影响使用了。\n<!--more-->\n## 修改查询快捷键\n![](http://120.24.60.216:4000/img/201606033212.png)\n## 修改代码提示快捷键\n![](http://120.24.60.216:4000/img/201606033326.png)\n## 修改重命名快捷键\n![](http://120.24.60.216:4000/img/201606033354.png)\n## 修改打开类的快捷键\n![](http://120.24.60.216:4000/img/201606033310.png)\n## 修改快速打开接口实现类快捷键\n![](http://120.24.60.216:4000/img/20160603165920.png)\n## 修改代码上下移动快捷键\n* 在keymap里面搜索move line\n* 分别在move line up 和move line down 里面添加快捷键cmd+up和cmd+down \n\n\n\n\n\n\n\n\n\n\n# 转发表明出现，谢谢！\n","source":"_posts/Idea设置eclipse快捷键.md","raw":"title: Idea设置eclipse快捷键\ndate: 2016-06-03 16:31:13\ncategories:\n- 学习\ntags:\n- Java\n---\n\nIdea 设置eclipse的快捷键后会有一些冲突，现在修改一些平时经常使用的快捷键，基本不影响使用了。\n<!--more-->\n## 修改查询快捷键\n![](http://120.24.60.216:4000/img/201606033212.png)\n## 修改代码提示快捷键\n![](http://120.24.60.216:4000/img/201606033326.png)\n## 修改重命名快捷键\n![](http://120.24.60.216:4000/img/201606033354.png)\n## 修改打开类的快捷键\n![](http://120.24.60.216:4000/img/201606033310.png)\n## 修改快速打开接口实现类快捷键\n![](http://120.24.60.216:4000/img/20160603165920.png)\n## 修改代码上下移动快捷键\n* 在keymap里面搜索move line\n* 分别在move line up 和move line down 里面添加快捷键cmd+up和cmd+down \n\n\n\n\n\n\n\n\n\n\n# 转发表明出现，谢谢！\n","slug":"Idea设置eclipse快捷键","published":1,"updated":"2016-06-14T06:58:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciprqbai500084pvh00denwep"},{"title":"Idea快键键","date":"2016-05-30T07:18:13.000Z","_content":"\n准备从eclipse切换到Idea，现在收集一些快捷键以便使用。\n\n<!--more-->\nAction | 快键键 | 解释\n----|------|----\n系统终端 | option/Alt+F12  | 有了这个东西，你就不必频繁地切换窗口了\n在项目的所有目录查找 | 双击shift   | 就是你想看到你不想看到的和你没想过你能看到的都给你找出来\n当前文件查找特定内容 | cmd+f   |  当前文件查找特定内容\n当前项目查找包含特定内容的文件 | cmd+shift+f   |  当前项目查找包含特定内容的文件\n查找最近的文件 | cmd+e   |  查找最近的文件\n查找方法或者类引用的地方 | alt+F7   |  非常非常频繁使用的一个快捷键，可以帮你找到你的函数或者变量或者类的所有引用到的地方\n内容替换 | cmd+r   |  当前文件替换特定内容\n项目内替换 | ctrl+shift+r | 当前项目替换特定内容\n重命名 | shift+F6 | 非常非常省心省力的一个快捷键，可以重命名你的类、方法、变量等等，而且这个重命名甚至可以选择替换掉注释中的内容\n复制当前行到下一行 | cmd+d | 复制当前行到下一行\n错误提示 | alt+enter | 看到代码里提示的各种红XX，就试试alt+enter吧！什么未抛异常啊没有try catch啊都能搞得定。\n自动格式代码 | ctrl+alt+L| 你可以个性化设置你自己的代码风格：File--Settings--CodeStyle\n注释代码 | cmd+/ | 注释单行代码\n注释代码块 | cmd+option+/ | 注释代码块\n清除无效包引用 | option+control+O | 清除无效包引用\n上下移动代码 | option+shift+up/down | 上下移动代码\n快速覆写父类方法 | control+O | 快速覆写父类方法\n快速移动到行的首尾 | cmd+left/right | 快速移动到行的首尾\n查找调用的位置 | control+option+H | 查找调用的位置\n大小写转换 | cmd+shift+u | 大小写转换\n返回上次编辑的位置 | amd+ALT+←/→ | 返回上次编辑的位置\n\n\n\n# 转发表明出现，谢谢！","source":"_posts/Idea快捷键.md","raw":"title: Idea快键键\ndate: 2016-05-30 15:18:13\ncategories:\n- 学习\ntags:\n- Java\n---\n\n准备从eclipse切换到Idea，现在收集一些快捷键以便使用。\n\n<!--more-->\nAction | 快键键 | 解释\n----|------|----\n系统终端 | option/Alt+F12  | 有了这个东西，你就不必频繁地切换窗口了\n在项目的所有目录查找 | 双击shift   | 就是你想看到你不想看到的和你没想过你能看到的都给你找出来\n当前文件查找特定内容 | cmd+f   |  当前文件查找特定内容\n当前项目查找包含特定内容的文件 | cmd+shift+f   |  当前项目查找包含特定内容的文件\n查找最近的文件 | cmd+e   |  查找最近的文件\n查找方法或者类引用的地方 | alt+F7   |  非常非常频繁使用的一个快捷键，可以帮你找到你的函数或者变量或者类的所有引用到的地方\n内容替换 | cmd+r   |  当前文件替换特定内容\n项目内替换 | ctrl+shift+r | 当前项目替换特定内容\n重命名 | shift+F6 | 非常非常省心省力的一个快捷键，可以重命名你的类、方法、变量等等，而且这个重命名甚至可以选择替换掉注释中的内容\n复制当前行到下一行 | cmd+d | 复制当前行到下一行\n错误提示 | alt+enter | 看到代码里提示的各种红XX，就试试alt+enter吧！什么未抛异常啊没有try catch啊都能搞得定。\n自动格式代码 | ctrl+alt+L| 你可以个性化设置你自己的代码风格：File--Settings--CodeStyle\n注释代码 | cmd+/ | 注释单行代码\n注释代码块 | cmd+option+/ | 注释代码块\n清除无效包引用 | option+control+O | 清除无效包引用\n上下移动代码 | option+shift+up/down | 上下移动代码\n快速覆写父类方法 | control+O | 快速覆写父类方法\n快速移动到行的首尾 | cmd+left/right | 快速移动到行的首尾\n查找调用的位置 | control+option+H | 查找调用的位置\n大小写转换 | cmd+shift+u | 大小写转换\n返回上次编辑的位置 | amd+ALT+←/→ | 返回上次编辑的位置\n\n\n\n# 转发表明出现，谢谢！","slug":"Idea快捷键","published":1,"updated":"2016-05-30T10:19:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciprqbai9000b4pvhg3kjfltg"},{"title":"spring-boot使用","date":"2016-08-10T12:22:25.000Z","_content":"\n因公司项目重构，记录下spring-boot构建spring-mvc工程。\n<!--more-->\n## 工程的结构，使用maven java工程\n![](http://120.24.60.216:4000/img/20160810202223.png)\n\n## 添加工程依赖的mvnbao\n\n```bash\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <version>${org.springframework-boot-version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <version>${org.springframework-boot-version}</version>\n            <scope>test</scope>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient -->\n        <dependency>\n            <groupId>org.apache.httpcomponents</groupId>\n            <artifactId>httpclient</artifactId>\n            <version>4.5.2</version>\n        </dependency>\n```\n## spring配置文件\n```bash\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <context:annotation-config/>\n    <context:property-placeholder/>\n\n</beans>\n```\n## 工程启动入口\n```bash\n@SpringBootApplication\n@ImportResource(\"classpath:application-context.xml\")\npublic class SpringBoot {\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBoot.class, args);\n    }\n}\n```\n## spring controller 配置\n```bash\n@RestController\npublic class DisonController {\n\n    @RequestMapping(\"/dison\")\n    public String test() {\n        return \"hello, dison\";\n    }\n\n}\n```\n\n好了，到这就实现了spring-boot！\n\n\n# 转发表明出现，谢谢！","source":"_posts/ spring-boot使用.md","raw":"title: spring-boot使用\ndate: 2016-08-10 20:22:25\ncategories:\n- 学习\ntags:\n- Java\n---\n\n因公司项目重构，记录下spring-boot构建spring-mvc工程。\n<!--more-->\n## 工程的结构，使用maven java工程\n![](http://120.24.60.216:4000/img/20160810202223.png)\n\n## 添加工程依赖的mvnbao\n\n```bash\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <version>${org.springframework-boot-version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <version>${org.springframework-boot-version}</version>\n            <scope>test</scope>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient -->\n        <dependency>\n            <groupId>org.apache.httpcomponents</groupId>\n            <artifactId>httpclient</artifactId>\n            <version>4.5.2</version>\n        </dependency>\n```\n## spring配置文件\n```bash\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <context:annotation-config/>\n    <context:property-placeholder/>\n\n</beans>\n```\n## 工程启动入口\n```bash\n@SpringBootApplication\n@ImportResource(\"classpath:application-context.xml\")\npublic class SpringBoot {\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBoot.class, args);\n    }\n}\n```\n## spring controller 配置\n```bash\n@RestController\npublic class DisonController {\n\n    @RequestMapping(\"/dison\")\n    public String test() {\n        return \"hello, dison\";\n    }\n\n}\n```\n\n好了，到这就实现了spring-boot！\n\n\n# 转发表明出现，谢谢！","slug":" spring-boot使用","published":1,"updated":"2016-08-10T14:34:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp0eorb0000lzvhzy8lct92"},{"title":"spring-boot加入Servlet","date":"2016-08-10T14:02:20.000Z","_content":"\n因公司项目重构，之前使用mvn-web工程创建项目，现在使用spring-boot创建项目，现在的新接口都是使用spring-mvc写，但是之前的大部分的接口是使用Servlet作为入口的，使用在迁移代码无可避免用使用Servlet，所以在这记录下spring-boot使用Servlet的方法。\n<!--more-->\n## 在 SpringBootApplication 上使用@ServletComponentScan 注解\n\n```bash\n@ServletComponentScan\n@SpringBootApplication\n@ImportResource(\"classpath:application-context.xml\")\npublic class SpringBoot {\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBoot.class, args);\n    }\n}\n```\n## 使用注解注册Servlet\n```bash\n@WebServlet(urlPatterns=\"/test\", description=\"Servlet的说明\") // 不指定name的情况下，name默认值为类全路径，即com.dison.spring.boot.servlet.TestServlet\npublic class TestServlet extends HttpServlet {\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        doPost(req, resp);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        ServletOutputStream outputStream = resp.getOutputStream();\n        outputStream.write(\"sussecc\".getBytes());\n        outputStream.close();\n    }\n}\n```\n这简单的两步，就实现了在spring-boot中使用Servlet\n\n\n# 转发表明出现，谢谢！","source":"_posts/spring-boot加入Servlet.md","raw":"title: spring-boot加入Servlet\ndate: 2016-08-10 22:02:20\ncategories:\n- 学习\ntags:\n- Java\n---\n\n因公司项目重构，之前使用mvn-web工程创建项目，现在使用spring-boot创建项目，现在的新接口都是使用spring-mvc写，但是之前的大部分的接口是使用Servlet作为入口的，使用在迁移代码无可避免用使用Servlet，所以在这记录下spring-boot使用Servlet的方法。\n<!--more-->\n## 在 SpringBootApplication 上使用@ServletComponentScan 注解\n\n```bash\n@ServletComponentScan\n@SpringBootApplication\n@ImportResource(\"classpath:application-context.xml\")\npublic class SpringBoot {\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBoot.class, args);\n    }\n}\n```\n## 使用注解注册Servlet\n```bash\n@WebServlet(urlPatterns=\"/test\", description=\"Servlet的说明\") // 不指定name的情况下，name默认值为类全路径，即com.dison.spring.boot.servlet.TestServlet\npublic class TestServlet extends HttpServlet {\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        doPost(req, resp);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        ServletOutputStream outputStream = resp.getOutputStream();\n        outputStream.write(\"sussecc\".getBytes());\n        outputStream.close();\n    }\n}\n```\n这简单的两步，就实现了在spring-boot中使用Servlet\n\n\n# 转发表明出现，谢谢！","slug":"spring-boot加入Servlet","published":1,"updated":"2016-08-10T14:34:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp0eosg0003lzvh1hdkt5m2"}],"PostAsset":[],"PostCategory":[{"post_id":"cieinu1m600004ovh1dz2pmsb","category_id":"cieinu1mc00014ovhn2j045i8","_id":"cieinu1mg00044ovhsbwegnsz"},{"post_id":"cieinu1n300074ovhnrmaq7vy","category_id":"cieinu1n400084ovht2314az2","_id":"cieinu1n5000b4ovhkkg3gvqx"},{"post_id":"cieinu1n8000e4ovh5j54nb4d","category_id":"cieinu1n400084ovht2314az2","_id":"cieinu1n9000f4ovhqhveru1k"},{"post_id":"cieinu1nb000i4ovhpyism609","category_id":"cieinu1mc00014ovhn2j045i8","_id":"cieinu1ni000j4ovhsucine8r"},{"post_id":"cieinu1nl000l4ovhijqu03q7","category_id":"cieinu1n400084ovht2314az2","_id":"cieinu1nn000m4ovh06e7d3l1"},{"post_id":"cigkgex7j0000b0vhtnbdikt3","category_id":"cieinu1n400084ovht2314az2","_id":"cigkgex7q0001b0vhapq6v5a6"},{"post_id":"cigkgex890006b0vhe8jfzomx","category_id":"cieinu1n400084ovht2314az2","_id":"cigkgex8b0007b0vh4oyg9o31"},{"post_id":"cigkgex8e000ab0vhrsznywi5","category_id":"cieinu1n400084ovht2314az2","_id":"cigkgex8f000bb0vhjebx8zlr"},{"post_id":"cigkgex8i000eb0vh7g1imidl","category_id":"cieinu1n400084ovht2314az2","_id":"cigkgex8j000fb0vhhaixgnrt"},{"post_id":"cigkgex8n000hb0vh1k95hec1","category_id":"cieinu1n400084ovht2314az2","_id":"cigkgex8o000ib0vho5t1f8bi"},{"post_id":"cigkgex8r000lb0vhg0u7wcy2","category_id":"cieinu1n400084ovht2314az2","_id":"cigkgex8s000mb0vhuatc07x2"},{"post_id":"cigkgex8w000rb0vhxu50g0ns","category_id":"cieinu1n400084ovht2314az2","_id":"cigkgex8x000sb0vhdjlj2exv"},{"post_id":"cigkgex90000vb0vhs2ntf9zh","category_id":"cieinu1n400084ovht2314az2","_id":"cigkgex92000wb0vh74wt9ue6"},{"post_id":"cilm0vzxa00006qvhn1zop9m7","category_id":"cieinu1n400084ovht2314az2","_id":"cilm0vzxg00016qvh415tpthk"},{"post_id":"cilm0vzy500046qvh7uo5e802","category_id":"cieinu1n400084ovht2314az2","_id":"cilm0vzy700056qvhf5kdmu6t"},{"post_id":"cilm0vzy900086qvh2y60z7vq","category_id":"cieinu1n400084ovht2314az2","_id":"cilm0vzyb00096qvh0o1nu1on"},{"post_id":"cilm0vzyd000c6qvhhxix44q8","category_id":"cieinu1n400084ovht2314az2","_id":"cilm0vzye000d6qvhjn9hdz7g"},{"post_id":"cilm0vzyg000g6qvhqqg7wipu","category_id":"cieinu1n400084ovht2314az2","_id":"cilm0vzyh000h6qvhupsyhtua"},{"post_id":"cio2bi9f5000092vh3zpa92cr","category_id":"cieinu1n400084ovht2314az2","_id":"cio2bi9fb000192vh8gna7n3u"},{"post_id":"cio2bi9g4000392vhvnb1jvyy","category_id":"cieinu1n400084ovht2314az2","_id":"cio2bi9g6000492vhdlj87nla"},{"post_id":"ciprqbagl00004pvhzqglr757","category_id":"cieinu1n400084ovht2314az2","_id":"ciprqbagr00014pvh3g2hn8c6"},{"post_id":"ciprqbahy00044pvhtsk93m2g","category_id":"cieinu1n400084ovht2314az2","_id":"ciprqbai000054pvhaduunwnz"},{"post_id":"ciprqbai500084pvh00denwep","category_id":"cieinu1n400084ovht2314az2","_id":"ciprqbai700094pvhffubv072"},{"post_id":"ciprqbai9000b4pvhg3kjfltg","category_id":"cieinu1n400084ovht2314az2","_id":"ciprqbaia000c4pvha8nkmvjn"},{"post_id":"cirp0eorb0000lzvhzy8lct92","category_id":"cieinu1n400084ovht2314az2","_id":"cirp0eori0001lzvhma4i1k13"},{"post_id":"cirp0eosg0003lzvh1hdkt5m2","category_id":"cieinu1n400084ovht2314az2","_id":"cirp0eosh0004lzvhwnpdmg5s"}],"PostTag":[{"post_id":"cieinu1m600004ovh1dz2pmsb","tag_id":"cieinu1md00024ovhbj2sdzp1","_id":"cieinu1mg00054ovh2i4815vc"},{"post_id":"cieinu1m600004ovh1dz2pmsb","tag_id":"cieinu1mg00034ovhevdzgfox","_id":"cieinu1mg00064ovhnu4gfxsg"},{"post_id":"cieinu1n300074ovhnrmaq7vy","tag_id":"cieinu1n400094ovhy6ddnom3","_id":"cieinu1n6000c4ovhnjwi9u1h"},{"post_id":"cieinu1n300074ovhnrmaq7vy","tag_id":"cieinu1n5000a4ovhhkx04sm4","_id":"cieinu1n6000d4ovhqn0huyoi"},{"post_id":"cieinu1n8000e4ovh5j54nb4d","tag_id":"cieinu1n9000g4ovhgjy7wjsh","_id":"cieinu1na000h4ovhlimfb1aj"},{"post_id":"cieinu1nb000i4ovhpyism609","tag_id":"cieinu1md00024ovhbj2sdzp1","_id":"cieinu1nj000k4ovhprykazx7"},{"post_id":"cieinu1nl000l4ovhijqu03q7","tag_id":"cieinu1nn000n4ovh603ue3d0","_id":"cieinu1no000p4ovhidsoiapn"},{"post_id":"cieinu1nl000l4ovhijqu03q7","tag_id":"cieinu1no000o4ovho9d8ikuk","_id":"cieinu1np000q4ovhff94afd9"},{"post_id":"cigkgex7j0000b0vhtnbdikt3","tag_id":"cigkgex7q0002b0vhkq5lhic7","_id":"cigkgex7v0004b0vhvojvzukc"},{"post_id":"cigkgex7j0000b0vhtnbdikt3","tag_id":"cigkgex7u0003b0vh2lr5zs4h","_id":"cigkgex7v0005b0vhru61d9wp"},{"post_id":"cigkgex890006b0vhe8jfzomx","tag_id":"cigkgex8b0008b0vhqk194n90","_id":"cigkgex8c0009b0vhnt5j6hbd"},{"post_id":"cigkgex8e000ab0vhrsznywi5","tag_id":"cigkgex8g000cb0vh4k7756pw","_id":"cigkgex8g000db0vhet2urkpd"},{"post_id":"cigkgex8i000eb0vh7g1imidl","tag_id":"cigkgex8b0008b0vhqk194n90","_id":"cigkgex8j000gb0vhmvliqi9h"},{"post_id":"cigkgex8n000hb0vh1k95hec1","tag_id":"cigkgex8o000jb0vhodeuui4x","_id":"cigkgex8p000kb0vhywnthjp0"},{"post_id":"cigkgex8r000lb0vhg0u7wcy2","tag_id":"cigkgex7q0002b0vhkq5lhic7","_id":"cigkgex8t000ob0vhxbwwfqso"},{"post_id":"cigkgex8r000lb0vhg0u7wcy2","tag_id":"cieinu1n5000a4ovhhkx04sm4","_id":"cigkgex8t000pb0vh63n1gl89"},{"post_id":"cigkgex8r000lb0vhg0u7wcy2","tag_id":"cigkgex8s000nb0vh9y2q4wst","_id":"cigkgex8t000qb0vhci3jz8xd"},{"post_id":"cigkgex8w000rb0vhxu50g0ns","tag_id":"cieinu1n5000a4ovhhkx04sm4","_id":"cigkgex8x000tb0vhu6x46zzl"},{"post_id":"cigkgex8w000rb0vhxu50g0ns","tag_id":"cigkgex8s000nb0vh9y2q4wst","_id":"cigkgex8y000ub0vh3n6i2ooe"},{"post_id":"cigkgex90000vb0vhs2ntf9zh","tag_id":"cigkgex7q0002b0vhkq5lhic7","_id":"cigkgex92000xb0vhmqnoclx4"},{"post_id":"cigkgex90000vb0vhs2ntf9zh","tag_id":"cieinu1n5000a4ovhhkx04sm4","_id":"cigkgex92000yb0vhv3l7wx64"},{"post_id":"cigkgex90000vb0vhs2ntf9zh","tag_id":"cigkgex8s000nb0vh9y2q4wst","_id":"cigkgex93000zb0vh9jdzqhd7"},{"post_id":"cilm0vzxa00006qvhn1zop9m7","tag_id":"cilm0vzxg00026qvhgm17yewl","_id":"cilm0vzxm00036qvhnb2eueab"},{"post_id":"cilm0vzy500046qvh7uo5e802","tag_id":"cilm0vzy700066qvh3awccmez","_id":"cilm0vzy800076qvhw5c3tef8"},{"post_id":"cilm0vzy900086qvh2y60z7vq","tag_id":"cilm0vzyb000a6qvhd1jz9e9k","_id":"cilm0vzyb000b6qvhi7d08jx9"},{"post_id":"cilm0vzyd000c6qvhhxix44q8","tag_id":"cilm0vzye000e6qvhanyvd25b","_id":"cilm0vzye000f6qvhirhetvif"},{"post_id":"cilm0vzyg000g6qvhqqg7wipu","tag_id":"cilm0vzye000e6qvhanyvd25b","_id":"cilm0vzyi000i6qvhv8at7ynq"},{"post_id":"cio2bi9f5000092vh3zpa92cr","tag_id":"cigkgex7q0002b0vhkq5lhic7","_id":"cio2bi9fb000292vh5n8q6lp9"},{"post_id":"cio2bi9g4000392vhvnb1jvyy","tag_id":"cio2bi9g6000592vhyhnfm2yp","_id":"cio2bi9ge000692vhzxhsqc4w"},{"post_id":"ciprqbagl00004pvhzqglr757","tag_id":"ciprqbagr00024pvhelrs1kt1","_id":"ciprqbah200034pvhm6tzo68c"},{"post_id":"ciprqbahy00044pvhtsk93m2g","tag_id":"ciprqbai000064pvh9u8c0oju","_id":"ciprqbai100074pvh6uujq651"},{"post_id":"ciprqbai500084pvh00denwep","tag_id":"ciprqbagr00024pvhelrs1kt1","_id":"ciprqbai7000a4pvhqu456w92"},{"post_id":"ciprqbai9000b4pvhg3kjfltg","tag_id":"ciprqbagr00024pvhelrs1kt1","_id":"ciprqbaia000d4pvhd1g7vpux"},{"post_id":"cirp0eorb0000lzvhzy8lct92","tag_id":"ciprqbagr00024pvhelrs1kt1","_id":"cirp0eorj0002lzvhnucxv0c3"},{"post_id":"cirp0eosg0003lzvh1hdkt5m2","tag_id":"ciprqbagr00024pvhelrs1kt1","_id":"cirp0eosi0005lzvhlzq5haxw"}],"Tag":[{"name":"Hexo","_id":"cieinu1md00024ovhbj2sdzp1"},{"name":"node.js","_id":"cieinu1mg00034ovhevdzgfox"},{"name":"swift","_id":"cieinu1n400094ovhy6ddnom3"},{"name":"iOS","_id":"cieinu1n5000a4ovhhkx04sm4"},{"name":"linux","_id":"cieinu1n9000g4ovhgjy7wjsh"},{"name":"leetcodt","_id":"cieinu1nn000n4ovh603ue3d0"},{"name":"java","_id":"cieinu1no000o4ovho9d8ikuk"},{"name":"Android","_id":"cigkgex7q0002b0vhkq5lhic7"},{"name":"Ant","_id":"cigkgex7u0003b0vh2lr5zs4h"},{"name":"swift iOS","_id":"cigkgex8b0008b0vhqk194n90"},{"name":"markdown","_id":"cigkgex8g000cb0vh4k7756pw"},{"name":"React Native iOS Android","_id":"cigkgex8o000jb0vhodeuui4x"},{"name":"React Native","_id":"cigkgex8s000nb0vh9y2q4wst"},{"name":"Xcode iOS","_id":"cilm0vzxg00026qvhgm17yewl"},{"name":"Xcode iOS Alamofire","_id":"cilm0vzy700066qvh3awccmez"},{"name":"linux ffmpeg","_id":"cilm0vzyb000a6qvhd1jz9e9k"},{"name":"Android 百度sdk","_id":"cilm0vzye000e6qvhanyvd25b"},{"name":"iOS 百度语言在线合成","_id":"cio2bi9g6000592vhyhnfm2yp"},{"name":"Java","_id":"ciprqbagr00024pvhelrs1kt1"},{"name":"学习","_id":"ciprqbai000064pvh9u8c0oju"}]}}